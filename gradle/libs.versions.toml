[versions]
kotlin = "2.0.10"
kotlinx = "1.8.1"
spring-boot = "2.7.18"
spring-framework = "5.3.37"
spring-framework-6x = "6.1.11"
spring-boot-3x = "3.3.2"
spring-dependency-management = "1.1.6"
spring-kafka = "2.9.13"
spring-kafka-3x = "3.2.2"
couchbase-client = "3.7.1"
couchbase-client-metrics = "0.7.1"
couchbase-kotlin = "1.4.1"
jackson = "2.17.2"
arrow = "1.2.4"
arrowSuspendApp = "0.4.0"
arrow-jackson = "0.14.1"
io-reactor = "3.6.9"
io-reactor-extensions = "1.2.2"
slf4j = "2.0.16"
kafka = "3.8.0"
kafka-kotlin = "0.4.0"
dokka = "1.9.20"
knit = "0.5.0"
kover = "0.8.3"
ktor = "2.3.12"
koin = "3.5.6"
r2dbc-spi = "1.0.0.RELEASE"
r2dbc-postgresql = "0.8.13.RELEASE"
elastic = "8.15.0"
mongodb = "5.1.3"
wiremock = "3.9.1"
testcontainers = "1.20.1"
r2dbc-mssql = "1.0.2.RELEASE"
spotless = "6.25.0"
detekt = "1.23.6"
wire = "5.0.0"
io-grpc = "1.66.0"
io-grpc-kotlin = "1.4.1"
google-protobuf-kotlin = "4.27.3"
gradle-release = "3.0.2"
nexusPublish = "2.0.0"
shadow = "8.1.1"
hoplite = "2.8.0.RC3"
junit = "5.10.3"
kotest = "5.9.1"
mockito = "5.4.0"
quiver = "0.5.9"
akkurate = "0.8.0"

[libraries]
kotlin-stdlib-jdk8 = { module = "org.jetbrains.kotlin:kotlin-stdlib-jdk8", version.ref = "kotlin" }
kotlin-reflect = { module = "org.jetbrains.kotlin:kotlin-reflect", version.ref = "kotlin" }
kotlinx-reactor = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-reactor", version.ref = "kotlinx" }
kotlinx-reactive = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-reactive", version.ref = "kotlinx" }
kotlinx-core = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "kotlinx" }
kotlinx-jdk8 = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-jdk8", version.ref = "kotlinx" }
kotlinx-slf4j = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-slf4j", version.ref = "kotlinx" }
kotlinx-knit = { module = "org.jetbrains.kotlinx:kotlinx-knit", version.ref = "knit" }
kotlinx-io-reactor = { module = "io.projectreactor:reactor-core", version.ref = "io-reactor" }
kotlinx-io-reactor-extensions = { module = "io.projectreactor.kotlin:reactor-kotlin-extensions", version.ref = "io-reactor-extensions" }

# Arrow
arrow-core = { module = "io.arrow-kt:arrow-core", version.ref = "arrow" }
arrow-jackson = { module = "io.arrow-kt:arrow-integrations-jackson-module", version.ref = "arrow-jackson" }
arrow-suspendApp = { module = "io.arrow-kt:suspendapp", version.ref = "arrowSuspendApp" }
arrow-suspendApp-ktor = { module = "io.arrow-kt:suspendapp-ktor", version.ref = "arrowSuspendApp" }
arrow-continuations = { module = "io.arrow-kt:arrow-continuations", version.ref = "arrow" }
arrow-fx-coroutines = { module = "io.arrow-kt:arrow-fx-coroutines", version.ref = "arrow" }
arrow-resilience = { module = "io.arrow-kt:arrow-resilience", version.ref = "arrow" }
arrow-eval = { module = "io.arrow-kt:arrow-eval", version.ref = "arrow" }
arrow-atomic = { module = "io.arrow-kt:arrow-atomic", version.ref = "arrow" }
arrow-collectors = { module = "io.arrow-kt:arrow-collectors", version.ref = "arrow" }
arrow-fx-stm = { module = "io.arrow-kt:arrow-fx-stm", version.ref = "arrow" }
arrow-core-serialization = { module = "io.arrow-kt:arrow-core-serialization", version.ref = "arrow" }
arrow-cache4k = { module = "io.arrow-kt:arrow-cache4k", version.ref = "arrow" }
quiver = { module = "app.cash.quiver:lib", version.ref = "quiver" }
akkurate-arrow = { module = "dev.nesk.akkurate:akkurate-arrow", version.ref = "akkurate" }
akkurate-core = { module = "dev.nesk.akkurate:akkurate-core", version.ref = "akkurate" }
akkurate-ksp-plugin = { module = "dev.nesk.akkurate:akkurate-ksp-plugin", version.ref = "akkurate" }

# Kafka
kafka = { module = "org.apache.kafka:kafka-clients", version.ref = "kafka" }
kafkaKotlin = { module = "io.github.nomisrev:kotlin-kafka", version.ref = "kafka-kotlin" }

# Couchbase
couchbase-kotlin = { module = "com.couchbase.client:kotlin-client", version.ref = "couchbase-kotlin" }
couchbase-client = { module = "com.couchbase.client:java-client", version.ref = "couchbase-client" }
couchbase-client-metrics = { module = "com.couchbase.client:metrics-micrometer", version.ref = "couchbase-client-metrics" }

# Jackson
jackson-kotlin = { module = "com.fasterxml.jackson.module:jackson-module-kotlin", version.ref = "jackson" }
jackson-databind = { module = "com.fasterxml.jackson.core:jackson-databind", version.ref = "jackson" }
jackson-arrow = { module = "io.arrow-kt:arrow-integrations-jackson-module", version = "0.14.1" }
jackson-jsr310 = { module = "com.fasterxml.jackson.datatype:jackson-datatype-jsr310", version.ref = "jackson" }

# Slfj4
slf4j-api = { module = "org.slf4j:slf4j-api", version.ref = "slf4j" }
slf4j-simple = { module = "org.slf4j:slf4j-simple", version.ref = "slf4j" }

# Ktor
ktor-server-host-common = { module = "io.ktor:ktor-server-host-common", version.ref = "ktor" }
ktor-server = { module = "io.ktor:ktor-server", version.ref = "ktor" }
ktor-server-call-logging = { module = "io.ktor:ktor-server-call-logging", version.ref = "ktor" }
ktor-server-netty = { module = "io.ktor:ktor-server-netty", version.ref = "ktor" }
ktor-serialization-kotlinx-json = { module = "io.ktor:ktor-serialization-kotlinx-json", version.ref = "ktor" }
ktor-client-core = { module = "io.ktor:ktor-client-core", version.ref = "ktor" }
ktor-client-cio = { module = "io.ktor:ktor-client-cio", version.ref = "ktor" }
ktor-client-okhttp = { module = "io.ktor:ktor-client-okhttp", version.ref = "ktor" }
ktor-client-plugins-logging = { module = "io.ktor:ktor-client-logging", version.ref = "ktor" }
ktor-client-content-negotiation = { module = "io.ktor:ktor-client-content-negotiation", version.ref = "ktor" }
ktor-serialization-jackson-json = { module = "io.ktor:ktor-serialization-jackson", version.ref = "ktor" }

# koin
koin-ktor = { module = "io.insert-koin:koin-ktor", version.ref = "koin" }
koin-logger-slf4j = { module = "io.insert-koin:koin-logger-slf4j", version.ref = "koin" }

# r2dbc
r2dbc-spi = { module = "io.r2dbc:r2dbc-spi", version.ref = "r2dbc-spi" }
r2dbc-postgresql = { module = "io.r2dbc:r2dbc-postgresql", version.ref = "r2dbc-postgresql" }

# elastic
elastic = { module = "co.elastic.clients:elasticsearch-java", version.ref = "elastic" }

# mongo
mongodb-kotlin-coroutine = { module = "org.mongodb:mongodb-driver-kotlin-coroutine", version.ref = "mongodb" }

# misc
lettuce-core = { module = "io.lettuce:lettuce-core", version = "6.4.0.RELEASE" }
logback-classic = { module = "ch.qos.logback:logback-classic", version = "1.5.6" }
r2dbc-mssql = { module = "io.r2dbc:r2dbc-mssql", version.ref = "r2dbc-mssql" }
microsoft-sqlserver-jdbc = { module = "com.microsoft.sqlserver:mssql-jdbc", version = "12.8.0.jre11" }

### Testing
wiremock-standalone = { module = "org.wiremock:wiremock-standalone", version.ref = "wiremock" }
testcontainers = { module = "org.testcontainers:testcontainers", version.ref = "testcontainers" }
testcontainers-jdbc = { module = "org.testcontainers:jdbc", version.ref = "testcontainers" }
testcontainers-kafka = { module = "org.testcontainers:kafka", version.ref = "testcontainers" }
testcontainers-couchbase = { module = "org.testcontainers:couchbase", version.ref = "testcontainers" }
testcontainers-postgres = { module = "org.testcontainers:postgresql", version.ref = "testcontainers" }
testcontainers-elasticsearch = { module = "org.testcontainers:elasticsearch", version.ref = "testcontainers" }
testcontainers-mongodb = { module = "org.testcontainers:mongodb", version.ref = "testcontainers" }
testcontainers-mssql = { module = "org.testcontainers:mssqlserver", version.ref = "testcontainers" }
testcontainers-redis = { module = "com.redis.testcontainers:testcontainers-redis-junit", version = "1.6.4" }

# spring-boot 2x
spring-boot = { module = "org.springframework.boot:spring-boot", version.ref = "spring-boot" }
spring-boot-webflux = { module = "org.springframework.boot:spring-boot-starter-webflux", version.ref = "spring-boot" }
spring-boot-actuator = { module = "org.springframework.boot:spring-boot-starter-actuator", version.ref = "spring-boot" }
spring-boot-autoconfigure = { module = "org.springframework.boot:spring-boot-autoconfigure", version.ref = "spring-boot" }
spring-boot-annotationProcessor = { module = "org.springframework.boot:spring-boot-configuration-processor", version.ref = "spring-boot" }
spring-framework-context = { module = "org.springframework:spring-context", version.ref = "spring-framework" }
spring-framework-beans = { module = "org.springframework:spring-beans", version.ref = "spring-framework" }
spring-boot-kafka = { module = "org.springframework.kafka:spring-kafka", version.ref = "spring-kafka" }

# spring-boot 3x
spring-boot-3x = { module = "org.springframework.boot:spring-boot", version.ref = "spring-boot-3x" }
spring-boot-3x-webflux = { module = "org.springframework.boot:spring-boot-starter-webflux", version.ref = "spring-boot-3x" }
spring-boot-3x-actuator = { module = "org.springframework.boot:spring-boot-starter-actuator", version.ref = "spring-boot-3x" }
spring-boot-3x-autoconfigure = { module = "org.springframework.boot:spring-boot-autoconfigure", version.ref = "spring-boot-3x" }
spring-boot-3x-annotationProcessor = { module = "org.springframework.boot:spring-boot-configuration-processor", version.ref = "spring-boot-3x" }
spring-boot-3x-kafka = { module = "org.springframework.kafka:spring-kafka", version.ref = "spring-kafka-3x" }
spring-framework-6x-context = { module = "org.springframework:spring-context", version.ref = "spring-framework-6x" }
spring-framework-6x-beans = { module = "org.springframework:spring-beans", version.ref = "spring-framework-6x" }

detekt-formatting = { module = "io.gitlab.arturbosch.detekt:detekt-formatting", version.ref = "detekt" }
wire-grpc-server = { module = "com.squareup.wiregrpcserver:server", version = "1.0.0-alpha04" }
wire-grpc-server-generator = { module = "com.squareup.wiregrpcserver:server-generator", version = "1.0.0-alpha04" }
wire-grpc-client = { module = "com.squareup.wire:wire-grpc-client", version.ref = "wire" }
wire-grpc-runtime = { module = "com.squareup.wire:wire-runtime", version.ref = "wire" }
io-grpc = { module = "io.grpc:grpc-core", version.ref = "io-grpc" }
io-grpc-stub = { module = "io.grpc:grpc-stub", version.ref = "io-grpc" }
io-grpc-protobuf = { module = "io.grpc:grpc-protobuf", version.ref = "io-grpc" }
io-grpc-netty = { module = "io.grpc:grpc-netty", version.ref = "io-grpc" }
io-grpc-kotlin = { module = "io.grpc:grpc-kotlin-stub", version.ref = "io-grpc-kotlin" }
google-protobuf-kotlin = { module = "com.google.protobuf:protobuf-kotlin", version.ref = "google-protobuf-kotlin" }
hoplite = { module = "com.sksamuel.hoplite:hoplite-core", version.ref = "hoplite" }
hoplite-yaml = { module = "com.sksamuel.hoplite:hoplite-yaml", version.ref = "hoplite" }

caffeine = { module = "com.github.ben-manes.caffeine:caffeine", version = "3.1.8" }
pprint = { module = "io.exoquery:pprint-kotlin", version = "2.0.2" }

mockito-kotlin = { module = "org.mockito.kotlin:mockito-kotlin", version.ref = "mockito" }
junit = { module = "org.junit:junit-bom", version.ref = "junit" }
junit-jupiter = { module = "org.junit.jupiter:junit-jupiter", version.ref = "junit" }
kotest-runner-junit5 = { module = "io.kotest:kotest-runner-junit5", version.ref = "kotest" }
kotest-property = { module = "io.kotest:kotest-property", version.ref = "kotest" }
kotest-framework-api = { module = "io.kotest:kotest-framework-api", version.ref = "kotest" }
ktor-server-tests-jvm = { module = "io.ktor:ktor-server-tests-jvm", version.ref = "ktor" }

[bundles]
arrow-stack = ["arrow-core",
    "arrow-jackson",
    "arrow-suspendApp",
    "arrow-suspendApp-ktor",
    "arrow-continuations",
    "arrow-fx-coroutines",
    "arrow-resilience",
    "arrow-eval",
    "arrow-atomic",
    "arrow-collectors",
    "arrow-fx-stm",
    "arrow-core-serialization",
    "arrow-cache4k",
    "quiver",
    "akkurate-arrow",
    "akkurate-core",
    "akkurate-ksp-plugin"
]

[plugins]
spring-plugin = { id = "org.jetbrains.kotlin.plugin.spring", version.ref = "kotlin" }
spring-boot = { id = "org.springframework.boot", version.ref = "spring-boot" }
spring-dependencyManagement = { id = "io.spring.dependency-management", version.ref = "spring-dependency-management" }
ktfmt = { id = "com.ncorti.ktfmt.gradle", version = "0.19.0" }
kotlinter = { id = "org.jmailen.kotlinter", version = "4.4.1" }
dokka = { id = "org.jetbrains.dokka", version.ref = "dokka" }
knit = { id = "org.jetbrains.kotlinx:kotlinx-knit", version.ref = "knit" }
kover = { id = "org.jetbrains.kotlinx.kover", version.ref = "kover" }
gitVersioning = { id = "com.palantir.git-version", version = "3.1.0" }
spotless = { id = "com.diffplug.spotless", version.ref = "spotless" }
detekt = { id = "io.gitlab.arturbosch.detekt", version.ref = "detekt" }
wire = { id = "com.squareup.wire", version.ref = "wire" }
shadowJar = { id = "com.github.johnrengelman.shadow", version.ref = "shadow" }
gradle-release = { id = "net.researchgate.release", version.ref = "gradle-release" }
nexusPublish = { id = "io.github.gradle-nexus.publish-plugin", version.ref = "nexusPublish" }
testLogger = { id = "com.adarshr.test-logger", version = "4.0.0" }


