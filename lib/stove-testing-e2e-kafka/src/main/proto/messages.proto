syntax = "proto3";

// buf:lint:ignore FILE_SAME_PACKAGE
package com.trendyol.stove.testing.e2e.standalone.kafka;

message ConsumedMessage {
  string id = 1;
  bytes message = 2;
  string topic = 3;
  int32 partition = 4;
  int64 offset = 5;
  string key = 6;
  map<string, string> headers = 8;
}

message PublishedMessage {
  string id = 1;
  bytes message = 2;
  string topic = 3;
  string key = 4;
  map<string, string> headers = 5;
}

message CommittedMessage {
  string id = 1;
  string topic = 2;
  int32 partition = 3;
  int64 offset = 4;
  string metadata = 5;
}

message AcknowledgedMessage {
  string id = 1;
  string topic = 2;
  int32 partition = 3;
  int64 offset = 4;
  string exception = 5;
}

message Reply {
  int32 status = 3;
}

message HealthCheckRequest {
  string service = 1;
}

message HealthCheckResponse {
  enum ServingStatus {
    UNKNOWN = 0;
    SERVING = 1;
    NOT_SERVING = 2;
    SERVICE_UNKNOWN = 3; // Used only by the Watch method.
  }
  ServingStatus status = 1;
}

service StoveKafkaObserverService {
  rpc healthCheck(HealthCheckRequest) returns (HealthCheckResponse) {}

  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc onConsumedMessage(ConsumedMessage) returns (Reply) {}

  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc onPublishedMessage(PublishedMessage) returns (Reply) {}

  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc onCommittedMessage(CommittedMessage) returns (Reply) {}

  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc onAcknowledgedMessage(AcknowledgedMessage) returns (Reply) {}
}
