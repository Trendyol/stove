{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Stove","text":"<p>Stove is an end-to-end testing framework that spins up physical dependencies and your application all together. So you have a control over dependencies via Kotlin code.</p> <p>In the JVM world, thanks to code interoperability, you application code and test can be written with different JVM languages and can be run together. For example, you can write your application code with Java and write your tests with Kotlin, or Application code with Scala and test with Kotlin, etc. Stove uses this ability and provides a way to write your tests in Kotlin.</p> <p>Your tests will be infra agnostic, but component aware, so they can use easily necessary physical components with Stove provided APIs. All the infra is pluggable, and can be added easily. You can also create your own infra needs by using the abstractions that Stove provides. Having said that, the only dependency is <code>docker</code> since Stove is using testcontainers underlying.</p> <p>You can use JUnit and Kotest for running the tests. You can run all the tests on your CI, too. But that needs DinD(docker-in-docker) integration.</p> <p>The medium story about the motivation behind the framework: A New Approach to the API End-to-End Testing in Kotlin</p> <p>Note: Stove is not a replacement for the unit tests, it is a framework for end-to-end/component tests.</p>"},{"location":"#what-is-the-problem","title":"What is the problem?","text":"<p>In the JVM world, we have a lot of frameworks for the application code, but when it comes to integration/component/e2e testing we don't have a single framework that can be used for all the tech stacks. We have testcontainers but you still need to do lots of plumbing to make it work with your tech stack.</p> <p>The use-cases that led us develop the Stove are to increase the productivity of the developers while keeping the quality of the codebase high and coherent.</p> <p>Those use-cases are:</p> <ul> <li>Kotlin app with Spring-Boot</li> <li>Kotlin app with Ktor</li> <li>Java app with Spring-Boot</li> <li>Java app with Micronaut</li> <li>Java app with Quarkus</li> <li>Scala app with Spring-Boot</li> </ul> <p>People have different tech stacks and each time when they want to write e2e tests, they need to write a lot of boilerplate code. Alongside the physical components that are needed to be started, we need to write the code to start the application, and the code to access the beans of the application. Stove is here to solve this problem. It provides a single API to write e2e tests for all the tech stacks.</p> <p>Stove unifies the testing experience whatever you use.</p>"},{"location":"#high-level-architecture","title":"High Level Architecture","text":""},{"location":"#how-to-build-the-source-code","title":"How to build the source code?","text":"<ul> <li>JDK 17+</li> <li>Docker for running the tests (please use the latest version)</li> </ul> <pre><code>./gradlew build # that will build and run the tests\n</code></pre>"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#pre-requisites","title":"Pre-requisites","text":"<ul> <li>JDK 17+</li> <li>Docker for running the tests (please use the latest version)</li> <li>Kotlin 1.8+</li> <li>Gradle or Maven for running the tests, but Gradle is recommended.<ul> <li>Gradle is the default build tool for Stove, and it is used in the examples.</li> <li>If you are using Intellij IDEA, Kotest plugin is recommended.</li> </ul> </li> </ul> <p>The framework still under development and is getting matured. It is working well and in use at Trendyol. Besides, the Stove tests are highly likely going to be located under your testing context and the folder, so, it is risk-free to apply and use, give it a try!</p> <p><code>$version = please check the current version</code></p> <p>Versions are available at Releases</p> <p>Tip</p> <p>You can use SNAPSHOT versions for the latest features. You can add the following repository to your build file. SNAPSHOT versions released with the <code>1.0.0.{buildNumber}-SNAPSHOT</code> strategy.</p> <pre><code>repositories {\n    maven {\n        url = uri(\"https://oss.sonatype.org/content/repositories/snapshots/\")\n    }\n}\n</code></pre> <p>Every physical component that your testing needs is a separate module in Stove. You can add them according to your needs. Stove supports the following components:</p> <ul> <li>Kafka</li> <li>MongoDB</li> <li>MSSQL</li> <li>PostgreSQL</li> <li>Redis</li> <li>Elasticsearch</li> <li>Couchbase</li> <li>Wiremock</li> <li>HTTP</li> <li>Bridge</li> </ul> Gradle <pre><code>repositories {\n  mavenCentral()\n}\n\ndependencies {\n  // Application Under Test\n\n  // Spring Boot\n  testImplementation(\"com.trendyol:stove-spring-testing-e2e:$version\")\n\n  // or\n\n  // Ktor\n  testImplementation(\"com.trendyol:stove-ktor-testing-e2e:$version\")\n\n  // Components\n  testImplementation(\"com.trendyol:stove-testing-e2e:$version\")\n  testImplementation(\"com.trendyol:stove-testing-e2e-kafka:$version\")\n  testImplementation(\"com.trendyol:stove-testing-e2e-mongodb:$version\")\n  testImplementation(\"com.trendyol:stove-testing-e2e-mssql:$version\")\n  testImplementation(\"com.trendyol:stove-testing-e2e-postgresql:$version\")\n  testImplementation(\"com.trendyol:stove-testing-e2e-redis:$version\")\n  testImplementation(\"com.trendyol:stove-testing-e2e-elasticsearch:$version\")\n  testImplementation(\"com.trendyol:stove-testing-e2e-couchbase:$version\")\n  testImplementation(\"com.trendyol:stove-testing-e2e-wiremock:$version\")\n  testImplementation(\"com.trendyol:stove-testing-e2e-http:$version\")\n}\n</code></pre>"},{"location":"#how-to-write-tests","title":"How To Write Tests?","text":"<p>Stove uses your application entrance point to start your application alongside the physical components. The application's <code>main</code> is the entrance point for the applications in general.</p> <p>Everything starts with the <code>TestSystem</code> class. You can configure your system with the <code>with</code> function.</p> <pre><code>TestSystem()\n  .with {\n    // your configurations depending on the dependencies you need\n  }.run()\n</code></pre> <p><code>with</code> function is a lambda that you can configure your system. You can add your physical components. It is also a place to plug your custom systems that you might want to create. If you added <code>com.trendyol:stove-testing-e2e-kafka</code> package, you can use <code>kafka</code> function in the <code>with</code> block.</p> <pre><code>TestSystem()\n  .with {\n    kafka {\n      // your kafka configurations\n    }\n  }.run()\n</code></pre> <p>Note</p> <p>You can add multiple physical components in the <code>with</code> block. Think of it as a DSL for your test system and a <code>docker-compose</code> in Kotlin.</p> <p>Tip</p> <p>If you want to jump directly to the examples, you can check the examples in the repository.</p> <ul> <li> <p>Examples</p> <ul> <li>Ktor Example</li> <li>Spring Boot Example</li> <li>Spring Boot with Standalone Kafka</li> </ul> </li> <li> <p>Recipes</p> <ul> <li>Java Recipes</li> <li>Kotlin Recipes</li> <li>Scala Recipes</li> </ul> </li> </ul> <p>Stove has the concept of \"Application Aware Testing\". It means that Stove is aware of the application's entrance point and that is the only information it needs to start the application.</p> <p>Application that is being tested is a Spring Boot, Ktor, Micronaut, Quarkus, etc. and is called \"Application Under Test (AUT)\".</p> <p>The tests are agnostic to the application's framework. Right now Stove supports Spring Boot, Ktor. But it is easy to add new frameworks.</p> <p>Note</p> <p>If you want to add a new framework, you can check the <code>com.trendyol.stove.testing.e2e.system.abstractions.ApplicationUnderTest</code> interface. You can implement this interface for your framework.</p> <p>Let's create an example for a Spring-Boot application with Kafka and explain the setup flow.</p> <p>The dependencies we will need in the <code>build.gradle.kts</code> file are:</p> <pre><code> dependencies {\n  testImplementation(\"com.trendyol:stove-testing-e2e:$version\")\n  testImplementation(\"com.trendyol:stove-testing-e2e-kafka:$version\")\n  testImplementation(\"com.trendyol:stove-testing-e2e-http:$version\")\n  testImplementation(\"com.trendyol:stove-spring-testing-e2e:$version\")\n}\n</code></pre> <pre><code>TestSystem()\n  .with {\n    httpClient {\n      HttpClientSystemOptions(\n        baseUrl = \"http://localhost:8001\"\n      )\n    }\n\n    kafka {\n      KafkaSystemOptions(\n        containerOptions = KafkaContainerOptions(tag = \"latest\"),\n      ) {\n        listOf(\n          \"kafka.bootstrapServers=${it.bootstrapServers}\",\n          \"kafka.isSecure=false\",\n          \"kafka.interceptorClasses=${it.interceptorClass}\",\n          \"kafka.heartbeatInSeconds=2\",\n          \"kafka.autoCreateTopics=true\",\n          \"kafka.offset=earliest\",\n          \"kafka.secureKafka=false\"\n        )\n      }\n    }\n\n    bridge()\n\n    springBoot( // Application Under Test\n      runner = { parameters -&gt;\n        stove.spring.standalone.example.run(parameters)\n      },\n      withParameters = listOf(\n        \"server.port=8001\",\n        \"logging.level.root=info\",\n        \"logging.level.org.springframework.web=info\",\n        \"spring.profiles.active=default\",\n      )\n    )\n  }\n  .run()\n</code></pre> <p>The typical setup for a Spring Boot application with Kafka is like this. You can see that we have a <code>httpClient</code>function that is used for the HTTP client against the application's endpoints. Then we have a <code>kafka</code> function that is used for the Kafka setup. Then we have a <code>bridge</code> function that is used for accessing the DI container of the application. Then we have a <code>springBoot</code> function that is used for the Spring Boot application setup.</p>"},{"location":"#httpclient-function","title":"<code>httpClient</code> function","text":"<p>It is used for the HTTP client against the application's endpoints. You can configure the base URL of the application. When the application is started, the base URL is used for the HTTP client.</p>"},{"location":"#kafka-function","title":"<code>kafka</code> function","text":"<p>It is used for the Kafka setup. You can configure the Kafka container options and the Kafka properties. When the application is started, the Kafka container is started and the Kafka properties are used for the application. We will investigate the Kafka setup in detail in the Kafka section. Your application code should be able to read these properties, and event app code needs to be arranged for this.</p> <p>Is my application code e2e testing friendly?</p> <p>In general, to write proper unit tests your code should be testable.  This means extracting dependencies to interfaces and using dependency injection. </p> <p>Injecting time, configuration, and other dependencies is a good practice.  This makes your classes testable and you can easily replace the implementations of the interfaces in the tests.</p> <p>Changing your configuration to be able to read from the environment variables or CLI arguments is also a good practice. Since Stove is also passing down the test configurations and the optimum setup for the tests, your application should be able to read these configurations.</p> <p>So, don't think that you're changing too much application code just for sake of the Stove tests, you're making your application code e2e test friendly.</p>"},{"location":"#bridge-function","title":"<code>bridge</code> function","text":"<p>This function is used for accessing the DI container of the application. When the application is started, the bridge is created and the DI container is accessed in the tests.</p> <p>If you want to access to the beans of the application, you can simply do:</p> <pre><code>TestSystem.validate {\n  using&lt;UserApplicationService&gt; {\n    this.getUserById(1) shouldBe User(1, \"John\", \"Doe\")\n  }\n\n  using&lt;ProductDomainService, ProductRepository&gt; { productDomainService, productRepository -&gt;\n    productDomainService.getProductById(1) shouldBe Product(1, \"Product 1\")\n    productRepository.findById(1) shouldBe Product(1, \"Product 1\")\n  }\n}\n</code></pre>"},{"location":"#springboot-function","title":"<code>springBoot</code> function","text":"<p>This function is used for the Spring Boot application setup. You can configure the runner function and the parameters of the application. When the application is started, the runner function is called with the parameters. The parameters you see in <code>runner</code> function are the parameters that are passed to the Spring Boot application when it is started. Each physical component exposes its own properties and you can use them in the application. Here:</p> <pre><code>kafka {\n  KafkaSystemOptions(\n    containerOptions = KafkaContainerOptions(tag = \"latest\"),\n  ) {\n    listOf(\n      \"kafka.bootstrapServers=${it.bootstrapServers}\",\n      \"kafka.isSecure=false\",\n      \"kafka.interceptorClasses=${it.interceptorClass}\",\n      \"kafka.heartbeatInSeconds=2\",\n      \"kafka.autoCreateTopics=true\",\n      \"kafka.offset=earliest\",\n      \"kafka.secureKafka=false\"\n    )\n  }\n}\n</code></pre> <p>The list of properties are exposed by the Kafka component and you can use them in the application. The reference <code>it</code> in this block is the physical component itself and it's exposed properties. Whenever Kafka and testing suite start, the properties are changed and passed down to the application.</p>"},{"location":"#run-function","title":"<code>run</code> function","text":"<p>Runs the entire setup. It starts the physical components and the application.</p> <p>Run the Setup Once</p> <p>You should run the setup once in your test suite. You can run it in the <code>@BeforeAll</code> function of JUnit or implement <code>AbstractProjectConfig#beforeProject</code> in Kotest. Teardown is also important to call. You can run it in the <code>@AfterAll</code> function of JUnit or implement <code>AbstractProjectConfig#afterProject</code> in Kotest. Simply calling <code>TestSystem.stop()</code> is enough to stop the setup.</p>"},{"location":"#writing-tests","title":"Writing Tests","text":"<p>After the setup is done, you can write your tests. You can use the <code>validate</code> function to write your tests.</p> <pre><code>TestSystem.validate {\n  http {\n    get&lt;String&gt;(\"/hello/index\") { actual -&gt;\n      actual shouldContain \"Hi from Stove framework\"\n    }\n  }\n\n  kafka {\n    shouldBeConsumed&lt;ProductCreatedEvent&gt; { actual -&gt;\n      actual.productId == 1\n    }\n  }\n\n  using&lt;UserApplicationService&gt; {\n    this.getUserById(1) shouldBe User(1, \"John\", \"Doe\")\n  }\n\n  using&lt;ProductDomainService, ProductRepository&gt; { productDomainService, productRepository -&gt;\n    productDomainService.getProductById(1) shouldBe Product(1, \"Product 1\")\n    productRepository.findById(1) shouldBe Product(1, \"Product 1\")\n  }\n\n  kafka {\n    shouldBePublished&lt;ProductCreatedEvent&gt; { actual -&gt;\n      actual.productId == 1\n    }\n  }\n}\n</code></pre> <p>That's it! You have up-and-running API, can be tested with Stove. And each test is independent of each other. But they share the same instance of physical component of course, so you need to provide random data for each test. This is a good practice for the tests to be independent of each other.</p>"},{"location":"#application-aware-testing","title":"Application Aware Testing","text":"<p>Stove is aware of your application either it is SpringBoot or Ktor, and it is aware of the entrance point of your application.</p> <p>There are entry point for every application, usually a <code>main</code> method that is invoked, and starts the application lifecycle.</p> <p>If you are publishing your <code>application</code> as a docker image, <code>docker run ...</code> basically runs your application highly likely with a <code>jvm/java</code> command.</p> <p>In this approach, we're using the same <code>main</code> function of your application in the test context to run the application as full-blown as if it is invoked from outside.</p> <p>Stove calls your application's <code>main</code> function like you would call <code>java yourApplicationName.jar --param1 --param2</code> to run the application from the test context. So the runner is JUnit or Kotest.</p> <p>For Stove to attach properly to your application, application's main function needs to allow that. This does not change behaviour at all, it just opens a door for e2e testing framework to enter.</p> <p>This approach has lots of benefits besides of providing a debug ability while e2e testing. You can:</p> <ul> <li>Debug the application code</li> <li>Replace the implementations of the interfaces. Useful for time-bounded implementations such as schedulers, background   workers, and time itself.   you would only have consuming.</li> <li>Use and expose application's dependency container to the test context. You can access the beans of the application   easily. Using <code>bridge</code> functionality.</li> </ul>"},{"location":"#spring-boot","title":"Spring Boot","text":"<p>You need to add the Stove-Spring dependency to be able to write e2e tests for the Spring application.</p> Gradle <pre><code>dependencies {\n    testImplementation(\"com.trendyol:stove-spring-testing-e2e:$version\")\n\n    // You can add other components if you need\n}\n</code></pre>"},{"location":"#tuning-the-applications-entry-point","title":"Tuning the application's entry point","text":"<p>Let's say the application has a standard <code>main</code> function, here how we will change it:</p> BeforeAfter <pre><code>@SpringBootApplication\nclass ExampleApplication\n\nfun main(args: Array&lt;String&gt;) { runApplication&lt;ExampleApplication&gt;(*args) }\n</code></pre> <pre><code>@SpringBootApplication\nclass ExampleApplication\n\nfun main(args: Array&lt;String&gt;) { run(args) }\n\nfun run(\n     args: Array&lt;String&gt;,\n     init: SpringApplication.() -&gt; Unit = {},\n  ): ConfigurableApplicationContext {\n        return runApplication&lt;ExampleApplication&gt;(*args, init = init)\n    }\n</code></pre> <p>As you can see from <code>before-after</code> sections, we have divided the application main function into two parts.</p> <p><code>run(args, init)</code> method is the important point for the testing configuration. <code>init</code> allows us to override any dependency from the testing side that is being <code>time</code> related or <code>configuration</code> related. Spring itself opens this configuration higher order function to the outside.</p> <p>Also returning <code>ConfigurableApplicationContext</code> is important for the <code>bridge</code> functionality that we will use in the tests.</p> <p>Tip</p> <p>Here you can jump immediately to the Spring example application.</p>"},{"location":"#initial-configuration","title":"Initial Configuration","text":"<p>After you've added the dependencies, and configured the application's <code>main</code> function, it is time to run your application for the first time from the test-context with Stove.</p>"},{"location":"#setting-up-stove-for-the-runner","title":"Setting up Stove for the Runner","text":"KotestJUnit <p>It implements <code>AbstractProjectConfig</code> from Kotest framework that allows us to spin up Stove per run. This is project wide operation and executes only one time, as the name implies <code>beforeProject</code>.</p> <pre><code>class Stove : AbstractProjectConfig() {    \n    override suspend fun beforeProject(): Unit = \n        TestSystem()\n            .with {\n                httpClient {\n                    HttpClientSystemOptions (\n                        baseUrl = \"http://localhost:8001\"\n                    )\n                }\n                springBoot(\n                    runner = { parameters -&gt;\n                        /* \n                        *  As you remember, we have divided application's main \n                        *  function into two parts, main and run. \n                        *  We use `run` invocation here.\n                        * */\n                        stove.spring.example.run(parameters)\n                    },\n                    withParameters = listOf(\n                        \"server.port=8001\",\n                        \"logging.level.root=warn\",\n                        \"logging.level.org.springframework.web=warn\",\n                        \"spring.profiles.active=default\"\n                    )\n                )\n            }.run()\n\n    override suspend fun afterProject(): Unit = TestSystem.stop()\n}\n</code></pre> <pre><code>class TestSystemConfig {\n\n    @BeforeAll\n    fun beforeProject() = runBlocking {\n         TestSystem()\n            .with {\n                httpClient {\n                    HttpClientSystemOptions (\n                        baseUrl = \"http://localhost:8001\"\n                    )\n                }\n                springBoot(\n                    runner = { parameters -&gt;\n                        /* \n                        *  As you remember, we have divided application's main \n                        *  function into two parts, main and run. \n                        *  We use `run` invocation here.\n                        * */\n                        stove.spring.example.run(parameters)\n                    },\n                    withParameters = listOf(\n                        \"server.port=8001\",\n                        \"logging.level.root=warn\",\n                        \"logging.level.org.springframework.web=warn\",\n                        \"spring.profiles.active=default\"\n                    )\n                )\n            }.run()\n    }\n\n    @AfterAll\n    fun afterProject() = runBlocking {\n        TestSystem.stop()\n    }\n}\n</code></pre> <p>In the section of <code>springBoot</code> function, we have configured the application's entry point, and the parameters that are passed to the application. <code>stove.spring.example.run(parameters)</code> is the entrance point of the application.</p> <p>Like the concept of <code>service under test</code> from the Test-Driven-Development. Here we have the similar concept, since we're testing the entire system, it is called <code>Application Under Test</code></p> <p>In here we're configuring the Spring Boot application as application under test.</p> <p>Note</p> <p><code>server.port=8001</code> is a Spring config, TestSystem's <code>baseUrl</code> needs to match with it, since Http requests are made  against the <code>baseUrl</code> that is defined. <code>withDefaultHttp</code> creates a WebClient and uses the <code>baseUrl</code> that is passed.</p>"},{"location":"#writing-tests_1","title":"Writing Tests","text":"<p>Here is an example test that validates <code>http://localhost:$port/hello/index</code> returns the expected text</p> KotestJUnit <pre><code>class ExampleTest: FunSpec({\n\n    test(\"should return hi\"){\n        TestSystem.validate {\n            http {\n                get&lt;String&gt;(\"/hello/index\") { actual -&gt; \n                    actual shouldContain \"Hi from Stove framework\" \n                }\n            }\n})\n</code></pre> <pre><code>class ExampleTest {\n\n    @Test\n    fun `should return hi`() {\n        TestSystem.validate {\n            http {\n                get&lt;String&gt;(\"/hello/index\") { actual -&gt; \n                    actual shouldContain \"Hi from Stove framework\" \n                }\n            }\n    }\n})\n</code></pre> <p>That's it! You have up-and-running API, can be tested with Stove.</p> <p>Tip</p> <p>DSL scopes can appear more than once while writing the tests.  You can access to any DSL assertion scope such as http, kafka, using, etc. as many times as you need.</p> <p>Example:</p> <pre><code>TestSystem.validate {\n    http {\n        get&lt;String&gt;(\"/hello/index\") { actual -&gt; \n            actual shouldContain \"Hi from Stove framework\" \n        }\n    }\n\n    kafka {\n        shouldBeConsumed&lt;ProductCreatedEvent&gt; { actual -&gt; \n            actual.productId == 1\n        }\n    }\n\n    kafka {\n        shouldBeConsumed&lt;ProductCreatedEvent&gt; { actual -&gt; \n            actual.productId == 1\n        }\n    }\n\n    http {\n        get&lt;String&gt;(\"/hello/index\") { actual -&gt; \n            actual shouldContain \"Hi from Stove framework\" \n        }\n    }\n\n    using&lt;UserApplicationService&gt; {\n        this.getUserById(1) shouldBe\n    }\n</code></pre>"},{"location":"#ktor","title":"Ktor","text":"Gradle <pre><code>dependencies {\n    testImplementation(\"com.trendyol:stove-ktor-testing-e2e:$version\")\n\n    // You can add other components if you need\n}\n</code></pre>"},{"location":"#example-setup","title":"Example Setup","text":"<pre><code>TestSystem()\n  .with {\n    // You can add other components if you need\n    // We removed for simplicity\n\n    ktor(\n      withParameters = listOf(\n        \"port=8080\"\n      ),\n      runner = { parameters -&gt;\n        stove.ktor.example.run(parameters) {\n          addTestSystemDependencies()\n        }\n      }\n    )\n  }.run()\n</code></pre> <p>After you've added <code>stove-ktor-testing-e2e</code> dependency, and configured the application's <code>main</code> function for Stove to enter, it is time to run your application for the first time from the test-context with Stove.</p>"},{"location":"#tuning-the-applications-entry-point_1","title":"Tuning the application's entry point","text":"<p>Let's say the application has a standard <code>main</code> function, here how we will change it:</p> BeforeAfter <pre><code>fun main() {\n  embeddedServer(Netty, port = 8080) {\n      routing {\n          get(\"/\") {\n              call.respondText(\"Hello, world!\")\n          }\n      }\n   }.start(wait = true)\n}\n</code></pre> <pre><code>object ExampleApp {\n  @JvmStatic\n  fun main(args: Array&lt;String&gt;) {\n     run(args)\n  }\n\n fun run(args: Array&lt;String&gt;, \n        wait: Boolean = true, \n        configure: org.koin.core.module.Module = module { }\n    ): Application {\n     val config = loadConfiguration&lt;Env&gt;(args)\n     return startKtorApplication(config, wait) {\n         appModule(config, configure)\n     }\n  }\n}\n</code></pre> <p>As you can see from <code>before-after</code> sections, we have divided the application main function into two parts. <code>run(args, wait, configure)</code> method is the important point for the testing configuration. <code>configure</code> allows us to override any dependency from the testing side that is being <code>time</code> related or <code>configuration</code> related.</p> <p>Note</p> <p>There are helper methods here for example loadConfiguration  that is used to load the configuration from the environment variables or CLI arguments. And as you can see there is an <code>Env</code> data class to cast the configuration.  Stove itself does not provide them, but of course we have already used them in our examples, you can find them in the examples.</p> <p>Tip</p> <p>Here you can jump immediately to the Ktor example application.</p>"},{"location":"#advanced","title":"Advanced","text":""},{"location":"#global-variables","title":"Global Variables","text":""},{"location":"#default_registry","title":"DEFAULT_REGISTRY","text":"<p>The default container registry is <code>docker.io</code>. You can change it by setting the <code>DEFAULT_REGISTRY</code> variable.</p> <pre><code>DEFAULT_REGISTRY = \"your.registry.com\"\n</code></pre> <p>This will effect all the components Stove wide. Or you can set it for each individual component by setting the<code>registry</code> property, example for Kafka:</p> <pre><code>KafkaSystemOptions(\n  containerOptions = KafkaContainerOptions(\n    registry = \"your.registry.com\",\n    tag = \"latest\"\n  ),\n)\n</code></pre>"},{"location":"#serializing-and-deserializing","title":"Serializing and Deserializing","text":"<p>Each component has its own serialization and deserialization mechanism. You can align Stove's serialization and deserialization mechanism with your application's serialization and deserialization mechanism.</p> <p>Stove works with multiple serializers and deserializers. The package <code>stove-testing-e2e</code> provides the following serializers and deserializers:</p> <ul> <li>Jackson</li> <li>Gson</li> <li>Kotlinx</li> </ul> <p>Stove also provides a way to add your own serializer and deserializer. You can implement the <code>StoveSerde&lt;TIn, TOut&gt;</code> interface and add your own serializer and deserializer.</p> <p><code>StoveSerde</code> also keeps the reference to the aforementioned libraries:</p> <pre><code>StoveSerde.jackson\nStoveSerde.gson\nStoveSerde.kotlinx\n</code></pre> <p>And also provides default implementations for them:</p> <pre><code>StoveSerde.jackson.anyByteArraySerde(yourObjectMapper())\nStoveSerde.gson.anyByteArraySerde(yourGson())\nStoveSerde.kotlinx.anyByteArraySerde(yourJson())\n\n// there is also string serde\nStoveSerde.jackson.anyStringSerde(yourObjectMapper())\nStoveSerde.gson.anyStringSerde(yourGson())\nStoveSerde.kotlinx.anyStringSerde(yourJson())\n</code></pre>"},{"location":"#replacing-dependencies-for-better-testability","title":"Replacing Dependencies For Better Testability","text":"<p>When it comes to handling the time, no one wants to wait for 30 minutes for a scheduler job, or for a delayed task to be able to test it. In these situations what we need to do is <code>advancing</code> the time, or replacing the effect of the time for our needs. This may require you to change your code, too. Because, we might need to provide a time-free implementation to an interface, or we might need to extract it to an interface if not properly implemented.</p> <p>For example, imagine we have a delayed command executor that accepts a task and a time for it to delay it until it is right time to execute. But, in tests we need to replace this behaviour with the time-effect free implementation.</p> <pre><code>class BackgroundCommandBusImpl // is the class for delayed operations\n</code></pre> <p>We would like to by-pass the time-bounded logic inside BackgroundCommandBusImpl, and for e2eTest scope we write:</p> <pre><code>class NoDelayBackgroundCommandBusImpl(\n  backgroundMessageEnvelopeDispatcher: BackgroundMessageEnvelopeDispatcher,\n  backgroundMessageEnvelopeStorage: BackgroundMessageEnvelopeStorage,\n  lockProvider: CouchbaseLockProvider,\n) : BackgroundCommandBusImpl(\n  backgroundMessageEnvelopeDispatcher,\n  backgroundMessageEnvelopeStorage,\n  lockProvider\n) {\n\n  override suspend fun &lt;TNotification : BackgroundNotification&gt; publish(\n    notification: TNotification,\n    options: BackgroundOptions,\n  ) {\n    super.publish(notification, options.withDelay(0))\n  }\n\n  override suspend fun &lt;TCommand : BackgroundCommand&gt; send(\n    command: TCommand,\n    options: BackgroundOptions,\n  ) {\n    super.send(command, options.withDelay(0))\n  }\n}\n</code></pre> <p>Now, it is time to tell to e2eTest system to use NoDelay implementation.</p> <p>That brings us to initializers.</p>"},{"location":"#writing-your-own-testsystem","title":"Writing Your Own TestSystem","text":"<pre><code>fun TestSystem.withSchedulerSystem(): TestSystem {\n  getOrRegister(SchedulerSystem(this))\n  return this\n}\n\nfun TestSystem.scheduler(): SchedulerSystem = getOrNone&lt;SchedulerSystem&gt;().getOrElse {\n  throw SystemNotRegisteredException(SchedulerSystem::class)\n}\n\nclass SchedulerSystem(override val testSystem: TestSystem) : AfterRunAware&lt;ApplicationContext&gt;, PluggedSystem {\n\n  private lateinit var scheduler: WaitingRoomScheduler\n  private lateinit var backgroundCommandBus: BackgroundCommandBusImpl\n\n  fun advance(): SchedulerSystem {\n    scheduler.publishValidProducts()\n    return this\n  }\n\n  fun advanceBackgroundCommandBus(): SchedulerSystem {\n    backgroundCommandBus.dispatchTimeoutNotifications()\n    return this\n  }\n\n  override suspend fun afterRun(context: ApplicationContext) {\n    scheduler = context.getBean()\n    backgroundCommandBus = context.getBean()\n  }\n\n  override fun close() {}\n}\n</code></pre> <p>Later you can use it in testing;</p> <pre><code>validate {\n  scheduler {\n    advance()\n  }\n}\n</code></pre>"},{"location":"#accessing-an-application-dependency-with-a-system","title":"Accessing an application dependency with a system","text":"<p>As you can see, in the example above, if a system implements <code>AfterRunAware&lt;ApplicationContext&gt;</code> then, <code>afterRun</code> method becomes available, in here we have access to applications dependency container to resolve any bean we need to use.</p> <pre><code>override suspend fun afterRun(context: ApplicationContext) {\n  scheduler = context.getBean()\n  backgroundCommandBus = context.getBean()\n}\n</code></pre>"},{"location":"#writing-a-testinitializer","title":"Writing a TestInitializer","text":"<p>The tests initializers help you to add test scoped beans, basically you can configure the Spring application from the test perspective.</p> <pre><code>class TestInitializer : BaseApplicationContextInitializer({\n  bean&lt;YourInstanceToReplace&gt;(isPrimary = true)\n  bean&lt;NoDelayBackgroundCommandBusImpl&gt;(isPrimary = true) // Optional dependency to alter delayed implementation with 0-wait.\n})\n\nfun SpringApplication.addTestDependencies() {\n  this.addInitializers(TestInitializer())\n}\n</code></pre> <p><code>addTestDependencies</code> is an extension that helps us to register our dependencies in the application.</p> <pre><code>.springBoot(\n  runner = { parameters -&gt;\n    com.trendyol.exampleapp.run(parameters) {\n      addTestDependencies()\n    }\n  },\n  withParameters = listOf(\n    \"logging.level.root=error\",\n    \"logging.level.org.springframework.web=error\",\n    \"spring.profiles.active=default\",\n    \"server.http2.enabled=false\",\n    \"kafka.heartbeatInSeconds=2\",\n    \"kafka.autoCreateTopics=true\",\n    \"kafka.offset=earliest\"\n  )\n)\n</code></pre>"},{"location":"Components/","title":"Dependencies","text":"<p>All the dependencies are pluggable. Stove supports:</p> <ul> <li>Couchbase</li> <li>Kafka</li> <li>Elasticsearch</li> <li>Wiremock</li> <li>Http client</li> <li>Postgres Sql</li> <li>MongoDB</li> <li>Mssql</li> <li>Redis</li> <li>Bridge</li> </ul>"},{"location":"Components/01-couchbase/","title":"Couchbase","text":"Gradle <pre><code>    dependencies {\n        testImplementation(\"com.trendyol:stove-testing-e2e-couchbase:$version\")\n    }\n</code></pre>"},{"location":"Components/01-couchbase/#configure","title":"Configure","text":"<p>After getting the library from the maven source, while configuring TestSystem you will have access to <code>couchbase</code> function. This function configures the Couchbase Docker container that is going to be started.</p> <p>Here you can define a <code>defaultBucket</code> name.</p> <p>Warning</p> <p>Make sure that your application has the same bucket names.</p> <pre><code>TestSystem()\n  .with {\n    couchbase {\n      CouchbaseSystemOptions(defaultBucket = \"test-bucket\", configureExposedConfiguration = { cfg -&gt;\n        listOf(\n          \"couchbase.hosts=${cfg.hostsWithPort}\",\n          \"couchbase.username=${cfg.username}\",\n          \"couchbase.password=${cfg.password}\"\n        )\n      })\n    }\n  }\n  .run()\n</code></pre> <p>Stove exposes configuration that is generated by the execution, so you can pass the real connection strings and configurations to your Spring application before it starts. Your application will start with the physical dependencies that are spun-up by the framework.</p>"},{"location":"Components/01-couchbase/#migrations","title":"Migrations","text":"<p>Stove provides a way to run migrations before the test starts.</p> <pre><code>class CouchbaseMigration : DatabaseMigration&lt;Cluster&gt; {\n  override val order: Int = 1\n\n  override suspend fun execute(connection: Cluster) {\n    val bucket = connection.bucket(CollectionConstants.BUCKET_NAME)\n    listOf(CollectionConstants.PRODUCT_COLLECTION).forEach { collection -&gt;\n      bucket.collections.createCollection(bucket.defaultScope().name, collection)\n    }\n    connection.waitUntilReady(30.seconds)\n  }\n}\n</code></pre> <p>You can define your migration class by implementing the <code>DatabaseMigration</code> interface. You can define the order of the migration by overriding the <code>order</code> property. The migrations will be executed in the order of the <code>order</code> property.</p> <p>After defining your migration class, you can pass it to the <code>migrations</code> function of the <code>couchbase</code> configuration.</p> <pre><code>TestSystem()\n  .with {\n    couchbase {\n      CouchbaseSystemOptions(defaultBucket = \"test-bucket\", configureExposedConfiguration = { cfg -&gt;\n        listOf(\n          \"couchbase.hosts=${cfg.hostsWithPort}\",\n          \"couchbase.username=${cfg.username}\",\n          \"couchbase.password=${cfg.password}\"\n        )\n      }).migrations {\n        register&lt;CouchbaseMigration&gt;()\n      }\n    }\n  }\n  .run()\n</code></pre>"},{"location":"Components/01-couchbase/#usage","title":"Usage","text":""},{"location":"Components/01-couchbase/#saving-documents","title":"Saving Documents","text":"<p>Save documents to Couchbase collections:</p> <pre><code>TestSystem.validate {\n  couchbase {\n    // Save to default collection (_default)\n    saveToDefaultCollection(\n      id = \"user:123\",\n      instance = User(id = \"123\", name = \"John Doe\", email = \"john@example.com\")\n    )\n\n    // Save to a specific collection\n    save(\n      collection = \"products\",\n      id = \"product:456\",\n      instance = Product(id = \"456\", name = \"Laptop\", price = 999.99)\n    )\n  }\n}\n</code></pre>"},{"location":"Components/01-couchbase/#getting-documents","title":"Getting Documents","text":"<p>Retrieve and validate documents:</p> <pre><code>TestSystem.validate {\n  couchbase {\n    // Get from default collection\n    shouldGet&lt;User&gt;(\"user:123\") { user -&gt;\n      user.id shouldBe \"123\"\n      user.name shouldBe \"John Doe\"\n      user.email shouldBe \"john@example.com\"\n    }\n\n    // Get from specific collection\n    shouldGet&lt;Product&gt;(\"products\", \"product:456\") { product -&gt;\n      product.id shouldBe \"456\"\n      product.name shouldBe \"Laptop\"\n      product.price shouldBe 999.99\n    }\n  }\n}\n</code></pre>"},{"location":"Components/01-couchbase/#checking-non-existence","title":"Checking Non-Existence","text":"<p>Verify that documents don't exist:</p> <pre><code>TestSystem.validate {\n  couchbase {\n    // Check default collection\n    shouldNotExist(\"user:999\")\n\n    // Check specific collection\n    shouldNotExist(\"products\", \"product:999\")\n  }\n}\n</code></pre>"},{"location":"Components/01-couchbase/#deleting-documents","title":"Deleting Documents","text":"<p>Delete documents and verify deletion:</p> <pre><code>TestSystem.validate {\n  couchbase {\n    // Delete from default collection\n    shouldDelete(\"user:123\")\n    shouldNotExist(\"user:123\")\n\n    // Delete from specific collection\n    shouldDelete(\"products\", \"product:456\")\n    shouldNotExist(\"products\", \"product:456\")\n  }\n}\n</code></pre>"},{"location":"Components/01-couchbase/#n1ql-queries","title":"N1QL Queries","text":"<p>Execute N1QL queries and validate results:</p> <pre><code>TestSystem.validate {\n  couchbase {\n    // Simple query\n    shouldQuery&lt;User&gt;(\"SELECT u.* FROM `users` u WHERE u.age &gt; 18\") { users -&gt;\n      users.size shouldBeGreaterThan 0\n      users.all { it.age &gt; 18 } shouldBe true\n    }\n\n    // Query with multiple conditions\n    shouldQuery&lt;Product&gt;(\n      \"\"\"\n      SELECT p.* \n      FROM `products` p \n      WHERE p.price &gt; 100 AND p.category = 'Electronics'\n      \"\"\".trimIndent()\n    ) { products -&gt;\n      products.size shouldBeGreaterThan 0\n      products.all { it.price &gt; 100 &amp;&amp; it.category == \"Electronics\" } shouldBe true\n    }\n  }\n}\n</code></pre>"},{"location":"Components/01-couchbase/#working-with-collections-and-scopes","title":"Working with Collections and Scopes","text":"<p>Access bucket, collection, and cluster directly:</p> <pre><code>TestSystem.validate {\n  couchbase {\n    // Access the cluster\n    val cluster = cluster()\n\n    // Access the bucket\n    val bucket = bucket()\n\n    // Perform custom operations\n    val customResult = bucket.collections.getAllScopes()\n    customResult shouldNotBe null\n  }\n}\n</code></pre>"},{"location":"Components/01-couchbase/#pause-and-unpause-container","title":"Pause and Unpause Container","text":"<p>Control the Couchbase container for testing failure scenarios:</p> <pre><code>TestSystem.validate {\n  couchbase {\n    // Pause the container\n    pause()\n\n    // Your application should handle the failure\n    // ...\n\n    // Unpause the container\n    unpause()\n\n    // Verify recovery\n    shouldGet&lt;User&gt;(\"user:123\") { user -&gt;\n      user.id shouldBe \"123\"\n    }\n  }\n}\n</code></pre>"},{"location":"Components/01-couchbase/#complete-example","title":"Complete Example","text":"<p>Here's a complete end-to-end test combining HTTP, Couchbase, and Kafka:</p> <pre><code>test(\"should create product and store in couchbase\") {\n  TestSystem.validate {\n    val productId = UUID.randomUUID().toString()\n    val productName = \"Gaming Laptop\"\n    val categoryId = 1\n\n    // Mock external service\n    wiremock {\n      mockGet(\n        url = \"/categories/$categoryId\",\n        statusCode = 200,\n        responseBody = Category(id = categoryId, name = \"Electronics\", active = true).some()\n      )\n    }\n\n    // Create product via API\n    http {\n      postAndExpectBody&lt;Any&gt;(\n        uri = \"/products\",\n        body = ProductCreateRequest(\n          name = productName,\n          price = 1299.99,\n          categoryId = categoryId\n        ).some()\n      ) { response -&gt;\n        response.status shouldBe 200\n      }\n    }\n\n    // Verify stored in Couchbase\n    couchbase {\n      shouldGet&lt;Product&gt;(\"products\", \"product:$productId\") { product -&gt;\n        product.id shouldBe productId\n        product.name shouldBe productName\n        product.price shouldBe 1299.99\n        product.categoryId shouldBe categoryId\n      }\n    }\n\n    // Verify event was published\n    kafka {\n      shouldBePublished&lt;ProductCreatedEvent&gt;(atLeastIn = 10.seconds) {\n        actual.id == productId &amp;&amp;\n        actual.name == productName &amp;&amp;\n        actual.price == 1299.99\n      }\n    }\n\n    // Query products by category\n    couchbase {\n      shouldQuery&lt;Product&gt;(\n        \"\"\"\n        SELECT p.* \n        FROM `products` p \n        WHERE p.categoryId = $categoryId\n        \"\"\".trimIndent()\n      ) { products -&gt;\n        products.size shouldBeGreaterThan 0\n        products.any { it.id == productId } shouldBe true\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"Components/01-couchbase/#integration-with-application","title":"Integration with Application","text":"<p>Verify application behavior using the bridge:</p> <pre><code>test(\"should use repository to save product\") {\n  TestSystem.validate {\n    val productId = UUID.randomUUID().toString()\n    val product = Product(id = productId, name = \"Test Product\", price = 99.99)\n\n    // Use application's repository\n    using&lt;ProductRepository&gt; {\n      save(product)\n    }\n\n    // Verify in Couchbase\n    couchbase {\n      shouldGet&lt;Product&gt;(\"products\", \"product:$productId\") { savedProduct -&gt;\n        savedProduct.id shouldBe productId\n        savedProduct.name shouldBe \"Test Product\"\n        savedProduct.price shouldBe 99.99\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"Components/01-couchbase/#advanced-operations","title":"Advanced Operations","text":""},{"location":"Components/01-couchbase/#batch-operations","title":"Batch Operations","text":"<pre><code>TestSystem.validate {\n  couchbase {\n    // Save multiple documents\n    val users = listOf(\n      User(id = \"1\", name = \"Alice\"),\n      User(id = \"2\", name = \"Bob\"),\n      User(id = \"3\", name = \"Charlie\")\n    )\n\n    users.forEach { user -&gt;\n      saveToDefaultCollection(\"user:${user.id}\", user)\n    }\n\n    // Query all\n    shouldQuery&lt;User&gt;(\"SELECT u.* FROM `${bucket().name}` u\") { result -&gt;\n      result.size shouldBeGreaterThanOrEqual users.size\n    }\n\n    // Verify each\n    users.forEach { user -&gt;\n      shouldGet&lt;User&gt;(\"user:${user.id}\") { actual -&gt;\n        actual.name shouldBe user.name\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"Components/01-couchbase/#error-handling","title":"Error Handling","text":"<pre><code>TestSystem.validate {\n  couchbase {\n    // Document not found\n    shouldNotExist(\"non-existent:key\")\n\n    // Attempting to delete non-existent document throws exception\n    assertThrows&lt;DocumentNotFoundException&gt; {\n      shouldDelete(\"non-existent:key\")\n    }\n\n    // Attempting to assert non-existence on existing document throws assertion error\n    saveToDefaultCollection(\"user:123\", User(id = \"123\", name = \"John\"))\n    assertThrows&lt;AssertionError&gt; {\n      shouldNotExist(\"user:123\")\n    }\n  }\n}\n</code></pre>"},{"location":"Components/02-kafka/","title":"Kafka","text":"<p>There are two ways to work with Kafka in Stove. You can use standalone Kafka or Kafka with Spring. You can use only one of them in your project.</p>"},{"location":"Components/02-kafka/#standalone-kafka","title":"Standalone Kafka","text":"Gradle <pre><code>    dependencies {\n        testImplementation(\"com.trendyol:stove-testing-e2e-kafka:$version\")\n    }\n</code></pre>"},{"location":"Components/02-kafka/#configure","title":"Configure","text":"<pre><code>TestSystem()\n  .with {\n    // other dependencies\n\n    kafka {\n      stoveKafkaObjectMapperRef = objectMapperRef\n      KafkaSystemOptions {\n        listOf(\n          \"kafka.bootstrapServers=${it.bootstrapServers}\",\n          \"kafka.interceptorClasses=${it.interceptorClass}\"\n        )\n      }\n    }\n  }.run()\n</code></pre> <p>The configuration values are:</p> <pre><code>class KafkaSystemOptions(\n  /**\n   * Suffixes for error and retry topics in the application.\n   */\n  val topicSuffixes: TopicSuffixes = TopicSuffixes(),\n  /**\n   * If true, the system will listen to the messages published by the Kafka system.\n   */\n  val listenPublishedMessagesFromStove: Boolean = false,\n  /**\n   * The port of the bridge gRPC server that is used to communicate with the Kafka system.\n   */\n  val bridgeGrpcServerPort: Int = stoveKafkaBridgePortDefault.toInt(),\n  /**\n   * The Serde that is used while asserting the messages,\n   * serializing while bridging the messages. Take a look at the [serde] property for more information.\n   *\n   * The default value is [StoveSerde.jackson]'s anyByteArraySerde.\n   * Depending on your application's needs you might want to change this value.\n   *\n   * The places where it was used listed below:\n   *\n   * @see [com.trendyol.stove.testing.e2e.standalone.kafka.intercepting.StoveKafkaBridge] for bridging the messages.\n   * @see StoveKafkaValueSerializer for serializing the messages.\n   * @see StoveKafkaValueDeserializer for deserializing the messages.\n   * @see valueSerializer for serializing the messages.\n   */\n  val serde: StoveSerde&lt;Any, ByteArray&gt; = stoveSerdeRef,\n  /**\n   * The Value serializer that is used to serialize messages.\n   */\n  val valueSerializer: Serializer&lt;Any&gt; = StoveKafkaValueSerializer(),\n  /**\n   * The options for the Kafka container.\n   */\n  val containerOptions: KafkaContainerOptions = KafkaContainerOptions(),\n  /**\n   * The options for the Kafka system that is exposed to the application\n   */\n  override val configureExposedConfiguration: (KafkaExposedConfiguration) -&gt; List&lt;String&gt;\n) : SystemOptions, ConfiguresExposedConfiguration&lt;KafkaExposedConfiguration&gt;\n</code></pre>"},{"location":"Components/02-kafka/#configuring-serializer-and-deserializer","title":"Configuring Serializer and Deserializer","text":"<p>Like every <code>SystemOptions</code> object, <code>KafkaSystemOptions</code> has a <code>serde</code> property that you can configure. It is a <code>StoveSerde</code> object that has two functions <code>serialize</code> and <code>deserialize</code>. You can configure them depending on your application's needs.</p> <pre><code>val kafkaSystemOptions = KafkaSystemOptions(\n  serde = object : StoveSerde&lt;Any, ByteArray&gt; {\n    override fun serialize(value: Any): ByteArray {\n      return objectMapper.writeValueAsBytes(value)\n    }\n\n    override fun &lt;T&gt; deserialize(value: ByteArray): T {\n      return objectMapper.readValue(value, Any::class.java) as T\n    }\n  }\n)\n</code></pre>"},{"location":"Components/02-kafka/#kafka-bridge-with-your-application","title":"Kafka Bridge With Your Application","text":"<p>Stove Kafka bridge is a MUST to work with Kafka. Otherwise you can't assert any messages from your application.</p> <p>As you can see in the example above, you need to add a support to your application to work with interceptor that Stove provides.</p> <pre><code> \"kafka.interceptorClasses=com.trendyol.stove.testing.e2e.standalone.kafka.intercepting.StoveKafkaBridge\"\n\n// or\n\n\"kafka.interceptorClasses={cfg.interceptorClass}\" // cfg.interceptorClass is exposed by Stove\n</code></pre> <p>Important</p> <p><code>kafka.</code> prefix or <code>interceptorClasses</code> are assumptions that you can change it with your own prefix or configuration.</p>"},{"location":"Components/02-kafka/#spring-kafka","title":"Spring Kafka","text":"<p>When you want to use Kafka with Application Aware testing it provides more assertion capabilities. It is recommended way of working. Stove-Kafka does that with intercepting the messages.</p>"},{"location":"Components/02-kafka/#how-to-get","title":"How to get?","text":"GradleMaven <pre><code>    dependencies {\n      testImplementation(\"com.trendyol:stove-spring-testing-e2e-kafka:$version\")\n    }\n</code></pre> <pre><code> &lt;dependency&gt;\n    &lt;groupId&gt;com.trendyol&lt;/groupId&gt;\n    &lt;artifactId&gt;stove-spring-testing-e2e-kafka&lt;/artifactId&gt;\n    &lt;version&gt;${stove-version}&lt;/version&gt;\n &lt;/dependency&gt;\n</code></pre>"},{"location":"Components/02-kafka/#configure_1","title":"Configure","text":""},{"location":"Components/02-kafka/#configuration-values","title":"Configuration Values","text":"<p>Kafka works with some settings as default, your application might have these values as not configurable, to make the application testable we need to tweak a little bit.</p> <p>If you have the following configurations:</p> <ul> <li><code>AUTO_OFFSET_RESET_CONFIG | \"auto.offset.reset\" | should be \"earliest\"</code></li> <li><code>ALLOW_AUTO_CREATE_TOPICS_CONFIG | \"allow.auto.create.topics\" | should be true</code></li> <li><code>HEARTBEAT_INTERVAL_MS_CONFIG | \"heartbeat.interval.ms\" | should be 2 seconds</code></li> </ul> <p>You better make them configurable, so from the e2e testing context we can change them work with Stove-Kafka testing.</p> <p>As an example:</p> <pre><code>TestSystem()\n  .with {\n    httpClient()\n    kafka()\n    springBoot(\n      runner = { parameters -&gt;\n        com.trendyol.exampleapp.run(parameters)\n      },\n      withParameters = listOf(\n        \"logging.level.root=error\",\n        \"logging.level.org.springframework.web=error\",\n        \"spring.profiles.active=default\",\n        \"server.http2.enabled=false\",\n        \"kafka.heartbeatInSeconds=2\",\n        \"kafka.autoCreateTopics=true\",\n        \"kafka.offset=earliest\"\n      )\n    )\n  }.run()\n</code></pre> <p>As you can see, we pass these configuration values as parameters. Since they are configurable, the application considers these values instead of application-default values.</p>"},{"location":"Components/02-kafka/#consumer-settings","title":"Consumer Settings","text":"<p>Second thing we need to do is tweak your consumer configuration. For that we will provide Stove-Kafka interceptor to your Kafka configuration.</p> <p>Locate to the point where you define your <code>ConcurrentKafkaListenerContainerFactory</code> or where you can set the interceptor. Interceptor needs to implement <code>ConsumerAwareRecordInterceptor&lt;String, String&gt;</code> since Stove-Kafka relies on that.</p> <pre><code>@EnableKafka\n@Configuration\nclass KafkaConsumerConfiguration(\n  private val interceptor: ConsumerAwareRecordInterceptor&lt;String, String&gt;,\n) {\n\n  @Bean\n  fun kafkaListenerContainerFactory(): ConcurrentKafkaListenerContainerFactory&lt;String, String&gt; {\n    val factory = ConcurrentKafkaListenerContainerFactory&lt;String, String&gt;()\n    // ...\n    factory.setRecordInterceptor(interceptor)\n    return factory\n  }\n}\n</code></pre>"},{"location":"Components/02-kafka/#producer-settings","title":"Producer Settings","text":"<p>Make sure that the aforementioned values are also configurable for producer settings, too. Stove will have access to <code>KafkaTemplate</code> and will use <code>setProducerListener</code> to arrange itself to listen produced messages.</p>"},{"location":"Components/02-kafka/#plugging-in","title":"Plugging in","text":"<p>When all the configuration is done, it is time to tell to application to use our <code>TestSystemInterceptor</code> and configuration values.</p>"},{"location":"Components/02-kafka/#testsysteminterceptor-and-testinitializer","title":"TestSystemInterceptor and TestInitializer","text":"<pre><code>class TestInitializer : BaseApplicationContextInitializer({\n  bean&lt;TestSystemInterceptor&gt;(isPrimary = true)\n  bean { StoveSerde.jackson.anyByteArraySerde(yourObjectMapper()) } // or any serde that implements StoveSerde&lt;Any, ByteArray&gt;\n})\n\nfun SpringApplication.addTestDependencies() {\n  this.addInitializers(TestInitializer())\n}\n</code></pre>"},{"location":"Components/02-kafka/#configuring-the-systemundertest-and-parameters","title":"Configuring the SystemUnderTest and Parameters","text":"<p><code>addTestDependencies</code> is an extension that helps us to register our dependencies in the application.</p> <pre><code>springBoot(\n  runner = { parameters -&gt;\n    com.trendyol.exampleapp.run(parameters) {\n      addTestDependencies() // Enable TestInitializer with extensions call\n    }\n  },\n  withParameters = listOf(\n    \"logging.level.root=error\",\n    \"logging.level.org.springframework.web=error\",\n    \"spring.profiles.active=default\",\n    \"server.http2.enabled=false\",\n    \"kafka.heartbeatInSeconds=2\", // Added Parameter\n    \"kafka.autoCreateTopics=true\", // Added Parameter\n    \"kafka.offset=earliest\" // Added Parameter\n  )\n)\n</code></pre> <p>Now you're full set and have control over Kafka messages from the testing context.</p>"},{"location":"Components/02-kafka/#testing","title":"Testing","text":""},{"location":"Components/02-kafka/#publishing-messages","title":"Publishing Messages","text":"<p>You can publish messages to Kafka topics for testing:</p> <pre><code>TestSystem.validate {\n  kafka {\n    publish(\n      topic = \"product-events\",\n      message = ProductCreated(id = \"123\", name = \"T-Shirt\"),\n      key = \"product-123\".some(), // Optional\n      headers = mapOf(\"X-UserEmail\" to \"user@example.com\"), // Optional\n      partition = 0 // Optional\n    )\n  }\n}\n</code></pre>"},{"location":"Components/02-kafka/#asserting-published-messages","title":"Asserting Published Messages","text":"<p>Test that your application publishes messages correctly:</p> <pre><code>TestSystem.validate {\n  // Trigger an action in your application\n  http {\n    postAndExpectBodilessResponse(\"/products\", body = CreateProductRequest(name = \"Laptop\").some()) { response -&gt;\n      response.status shouldBe 200\n    }\n  }\n\n  // Verify the message was published\n  kafka {\n    shouldBePublished&lt;ProductCreatedEvent&gt;(atLeastIn = 10.seconds) {\n      actual.name == \"Laptop\" &amp;&amp;\n      actual.id != null &amp;&amp;\n      metadata.topic == \"product-events\" &amp;&amp;\n      metadata.headers[\"event-type\"] == \"PRODUCT_CREATED\"\n    }\n  }\n}\n</code></pre>"},{"location":"Components/02-kafka/#asserting-consumed-messages","title":"Asserting Consumed Messages","text":"<p>Test that your application consumes messages correctly:</p> <pre><code>TestSystem.validate {\n  // Publish a message\n  kafka {\n    publish(\n      topic = \"order-events\",\n      message = OrderCreated(orderId = \"456\", amount = 100.0)\n    )\n  }\n\n  // Verify your application consumed and processed it\n  kafka {\n    shouldBeConsumed&lt;OrderCreated&gt;(atLeastIn = 20.seconds) {\n      actual.orderId == \"456\" &amp;&amp;\n      actual.amount == 100.0\n    }\n  }\n\n  // Verify side effects (e.g., database write)\n  couchbase {\n    shouldGet&lt;Order&gt;(\"order:456\") { order -&gt;\n      order.orderId shouldBe \"456\"\n      order.status shouldBe \"CREATED\"\n    }\n  }\n}\n</code></pre>"},{"location":"Components/02-kafka/#testing-failed-messages","title":"Testing Failed Messages","text":"<p>Test that your application handles failures correctly:</p> <pre><code>TestSystem.validate {\n  kafka {\n    // Publish an invalid message\n    publish(\"user-events\", FailingEvent(id = 5L))\n\n    // Verify it failed with the expected reason\n    shouldBeFailed&lt;FailingEvent&gt;(atLeastIn = 10.seconds) {\n      actual.id == 5L &amp;&amp;\n      reason is BusinessException\n    }\n  }\n}\n</code></pre>"},{"location":"Components/02-kafka/#testing-retry-logic","title":"Testing Retry Logic","text":"<p>Test that your application retries failed messages:</p> <pre><code>TestSystem.validate {\n  kafka {\n    publish(\"product-failing\", ProductFailingCreated(productId = \"789\"))\n\n    // Verify it was retried 3 times\n    shouldBeRetried&lt;ProductFailingCreated&gt;(atLeastIn = 1.minutes, times = 3) {\n      actual.productId == \"789\"\n    }\n\n    // Verify it ended up in error topic\n    shouldBePublished&lt;ProductFailingCreated&gt;(atLeastIn = 1.minutes) {\n      metadata.topic == \"product-failing.error\"\n    }\n  }\n}\n</code></pre>"},{"location":"Components/02-kafka/#working-with-message-metadata","title":"Working with Message Metadata","text":"<p>Access message metadata including headers, topic, partition, offset:</p> <pre><code>TestSystem.validate {\n  kafka {\n    shouldBeConsumed&lt;OrderCreated&gt; {\n      actual.orderId == \"123\" &amp;&amp;\n      metadata.topic == \"order-events\" &amp;&amp;\n      metadata.headers[\"correlation-id\"] != null &amp;&amp;\n      metadata.partition == 0\n    }\n  }\n}\n</code></pre>"},{"location":"Components/02-kafka/#peeking-messages","title":"Peeking Messages","text":"<p>Inspect messages without consuming them:</p> <pre><code>TestSystem.validate {\n  kafka {\n    // Peek at published messages\n    peekPublishedMessages(atLeastIn = 5.seconds, topic = \"product-events\") { record -&gt;\n      record.key == \"product-123\"\n    }\n\n    // Peek at consumed messages\n    peekConsumedMessages(atLeastIn = 5.seconds, topic = \"order-events\") { record -&gt;\n      record.offset &gt;= 10L\n    }\n\n    // Peek at committed messages\n    peekCommittedMessages(topic = \"order-events\") { record -&gt;\n      record.offset == 101L // next offset after 100 messages\n    }\n  }\n}\n</code></pre>"},{"location":"Components/02-kafka/#admin-operations","title":"Admin Operations","text":"<p>Manage Kafka topics and configurations:</p> <pre><code>TestSystem.validate {\n  kafka {\n    adminOperations {\n      createTopic(NewTopic(\"test-topic\", 1, 1))\n      // Other admin operations available here\n    }\n  }\n}\n</code></pre>"},{"location":"Components/02-kafka/#in-flight-consumer","title":"In-Flight Consumer","text":"<p>Create a consumer for advanced testing scenarios:</p> <pre><code>TestSystem.validate {\n  kafka {\n    consumer&lt;String, ProductCreated&gt;(\n      topic = \"product-events\",\n      readOnly = false, // commit messages\n      autoOffsetReset = \"earliest\",\n      autoCreateTopics = true,\n      keepConsumingAtLeastFor = 10.seconds\n    ) { record -&gt;\n      println(\"Consumed: ${record.value()}\")\n      // Process the message\n    }\n  }\n}\n</code></pre>"},{"location":"Components/02-kafka/#complete-example","title":"Complete Example","text":"<p>Here's a complete end-to-end test combining HTTP, Kafka, and database assertions:</p> <pre><code>test(\"should create product and publish event\") {\n  TestSystem.validate {\n    val productId = UUID.randomUUID()\n    val productName = \"Laptop\"\n\n    // Mock external service\n    wiremock {\n      mockGet(\"/categories/electronics\", statusCode = 200, responseBody = Category(id = 1, active = true).some())\n    }\n\n    // Make HTTP request\n    http {\n      postAndExpectBodilessResponse(\n        uri = \"/products\",\n        body = ProductCreateRequest(id = productId, name = productName, categoryId = 1).some()\n      ) { response -&gt;\n        response.status shouldBe 200\n      }\n    }\n\n    // Verify Kafka message was published\n    kafka {\n      shouldBePublished&lt;ProductCreatedEvent&gt;(atLeastIn = 10.seconds) {\n        actual.id == productId &amp;&amp;\n        actual.name == productName &amp;&amp;\n        metadata.headers[\"X-UserEmail\"] != null\n      }\n    }\n\n    // Verify database state\n    couchbase {\n      shouldGet&lt;Product&gt;(\"product:$productId\") { product -&gt;\n        product.id shouldBe productId\n        product.name shouldBe productName\n      }\n    }\n\n    // Verify the event was consumed by another service\n    kafka {\n      shouldBeConsumed&lt;ProductCreatedEvent&gt;(atLeastIn = 20.seconds) {\n        actual.id == productId &amp;&amp;\n        actual.name == productName\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"Components/03-elasticsearch/","title":"Elasticsearch","text":"Gradle <pre><code>    dependencies {\n        testImplementation(\"com.trendyol:stove-testing-e2e-elasticsearch:$version\")\n    }\n</code></pre>"},{"location":"Components/03-elasticsearch/#configure","title":"Configure","text":"<p>After getting the library from the maven source, while configuring TestSystem you will have access to <code>elasticsearch</code> function. This function configures the Elasticsearch Docker container that is going to be started.</p> <pre><code>TestSystem()\n  .with {\n    elasticsearch {\n      ElasticsearchSystemOptions(configureExposedConfiguration = { cfg -&gt;\n        listOf(\n          \"elasticsearch.hosts=${cfg.hostsWithPort}\",\n          \"elasticsearch.username=${cfg.username}\",\n          \"elasticsearch.password=${cfg.password}\"\n        )\n      })\n    }\n  }\n  .run()\n</code></pre>"},{"location":"Components/04-wiremock/","title":"Wiremock","text":"Gradle <pre><code>    dependencies {\n        testImplementation(\"com.trendyol:stove-testing-e2e-wiremock:$version\")\n    }\n</code></pre>"},{"location":"Components/04-wiremock/#configure","title":"Configure","text":"<p>After getting the library from the maven source, while configuring TestSystem you will have access to <code>wiremock</code> function.</p> <p>This will start an instance of Wiremock server. You can configure the port of the Wiremock server.</p> <pre><code>TestSystem()\n  .with {\n    wiremock {\n      WiremockSystemOptions(\n        port = 8080,\n      )\n    }\n  }\n  .run()\n</code></pre>"},{"location":"Components/04-wiremock/#options","title":"Options","text":"<pre><code>data class WireMockSystemOptions(\n  /**\n   * Port of wiremock server\n   */\n  val port: Int = 9090,\n  /**\n   * Configures wiremock server\n   */\n  val configure: WireMockConfiguration.() -&gt; WireMockConfiguration = { this.notifier(ConsoleNotifier(true)) },\n  /**\n   * Removes the stub when request matches/completes\n   * Default value is false\n   */\n  val removeStubAfterRequestMatched: Boolean = false,\n  /**\n   * Called after stub removed\n   */\n  val afterStubRemoved: AfterStubRemoved = { _, _ -&gt; },\n  /**\n   * Called after request handled\n   */\n  val afterRequest: AfterRequestHandler = { _, _ -&gt; },\n  /**\n   * ObjectMapper for serialization/deserialization\n   */\n  val serde: StoveSerde&lt;Any, ByteArray&gt; = StoveSerde.jackson.anyByteArraySerde()\n) : SystemOptions\n</code></pre>"},{"location":"Components/04-wiremock/#mocking","title":"Mocking","text":"<p>Wiremock starts a mock server on the <code>localhost</code> with the given port. The important thing is that you use the same port in your application for your services.</p> <p>Say, your application calls an external service in your production configuration as: <code>http://externalservice.com/api/product/get-all</code> you need to replace the base url of this an all the external services with the Wiremock host and port: <code>http://localhost:9090</code></p> <p>You can either do this in your application configuration, or let Stove send this as a command line argument to your application.</p> <pre><code>TestSystem()\n  .with {\n    wiremock {\n      WireMockSystemOptions(\n        port = 9090,\n      )\n    }\n    springBoot( // or ktor\n      runner = {\n        // ...\n      },\n      withParameters = listOf(\n        \"externalServiceBaseUrl=http://localhost:9090\",\n        \"otherService1BaseUrl=http://localhost:9090\",\n        \"otherService2BaseUrl=http://localhost:9090\"\n      )\n    )\n  }\n  .run()\n</code></pre> <p>All service endpoints will be pointing to the Wiremock server. You can now define the stubs for the services that your application calls.</p>"},{"location":"Components/04-wiremock/#usage","title":"Usage","text":""},{"location":"Components/04-wiremock/#get-requests","title":"GET Requests","text":"<p>Mock GET requests with various configurations:</p> <pre><code>TestSystem.validate {\n  wiremock {\n    // Simple GET mock\n    mockGet(\n      url = \"/api/products\",\n      statusCode = 200,\n      responseBody = listOf(\n        Product(\"1\", \"Laptop\", 999.99),\n        Product(\"2\", \"Mouse\", 29.99)\n      ).some()\n    )\n\n    // GET with custom headers\n    mockGet(\n      url = \"/api/user/profile\",\n      statusCode = 200,\n      responseBody = UserProfile(id = \"123\", name = \"John\").some(),\n      responseHeaders = mapOf(\n        \"Content-Type\" to \"application/json\",\n        \"X-Rate-Limit\" to \"100\"\n      )\n    )\n\n    // GET returning error\n    mockGet(\n      url = \"/api/products/999\",\n      statusCode = 404,\n      responseBody = ErrorResponse(\"Product not found\").some()\n    )\n  }\n}\n</code></pre>"},{"location":"Components/04-wiremock/#post-requests","title":"POST Requests","text":"<p>Mock POST requests with request/response bodies:</p> <pre><code>TestSystem.validate {\n  wiremock {\n    // POST with request and response body\n    mockPost(\n      url = \"/api/orders\",\n      statusCode = 201,\n      requestBody = CreateOrderRequest(items = listOf(\"item1\", \"item2\")).some(),\n      responseBody = OrderResponse(orderId = \"order-123\", status = \"CREATED\").some()\n    )\n\n    // POST with metadata matching\n    mockPost(\n      url = \"/api/users\",\n      statusCode = 201,\n      requestBody = CreateUserRequest(name = \"John\").some(),\n      responseBody = UserResponse(id = \"user-123\", name = \"John\").some(),\n      metadata = mapOf(\"Content-Type\" to \"application/json\")\n    )\n\n    // POST returning error\n    mockPost(\n      url = \"/api/orders\",\n      statusCode = 400,\n      requestBody = InvalidOrderRequest().some(),\n      responseBody = ValidationError(\"Invalid order data\").some()\n    )\n  }\n}\n</code></pre>"},{"location":"Components/04-wiremock/#put-requests","title":"PUT Requests","text":"<p>Mock PUT requests for updates:</p> <pre><code>TestSystem.validate {\n  wiremock {\n    // PUT with full update\n    mockPut(\n      url = \"/api/products/123\",\n      statusCode = 200,\n      requestBody = UpdateProductRequest(name = \"Updated Product\", price = 899.99).some(),\n      responseBody = Product(\"123\", \"Updated Product\", 899.99).some()\n    )\n\n    // PUT with no response body\n    mockPut(\n      url = \"/api/settings/update\",\n      statusCode = 204,\n      requestBody = UpdateSettingsRequest(theme = \"dark\").some()\n    )\n  }\n}\n</code></pre>"},{"location":"Components/04-wiremock/#patch-requests","title":"PATCH Requests","text":"<p>Mock PATCH requests for partial updates:</p> <pre><code>TestSystem.validate {\n  wiremock {\n    // PATCH for partial update\n    mockPatch(\n      url = \"/api/users/123\",\n      statusCode = 200,\n      requestBody = mapOf(\"email\" to \"newemail@example.com\").some(),\n      responseBody = UserResponse(id = \"123\", email = \"newemail@example.com\").some()\n    )\n  }\n}\n</code></pre>"},{"location":"Components/04-wiremock/#delete-requests","title":"DELETE Requests","text":"<p>Mock DELETE requests:</p> <pre><code>TestSystem.validate {\n  wiremock {\n    // DELETE returning success\n    mockDelete(\n      url = \"/api/products/123\",\n      statusCode = 204\n    )\n\n    // DELETE with metadata\n    mockDelete(\n      url = \"/api/users/456\",\n      statusCode = 200,\n      metadata = mapOf(\"Authorization\" to \"Bearer token123\")\n    )\n  }\n}\n</code></pre>"},{"location":"Components/04-wiremock/#head-requests","title":"HEAD Requests","text":"<p>Mock HEAD requests:</p> <pre><code>TestSystem.validate {\n  wiremock {\n    mockHead(\n      url = \"/api/products/exists/123\",\n      statusCode = 200\n    )\n\n    mockHead(\n      url = \"/api/products/exists/999\",\n      statusCode = 404\n    )\n  }\n}\n</code></pre>"},{"location":"Components/04-wiremock/#advanced-configuration","title":"Advanced Configuration","text":"<p>For complex scenarios, use the configure methods:</p> <pre><code>TestSystem.validate {\n  wiremock {\n    // Advanced GET configuration\n    mockGetConfigure(\n      url = \"/api/search\",\n      urlPatternFn = { urlPathMatching(\"/api/search.*\") }\n    ) { builder, serde -&gt;\n      builder\n        .withQueryParam(\"q\", matching(\".*laptop.*\"))\n        .willReturn(\n          aResponse()\n            .withStatus(200)\n            .withBody(serde.serialize(SearchResults(items = listOf(\"item1\", \"item2\"))))\n        )\n    }\n\n    // Advanced POST configuration\n    mockPostConfigure(\n      url = \"/api/webhooks\",\n      urlPatternFn = { urlEqualTo(it) }\n    ) { builder, serde -&gt;\n      builder\n        .withHeader(\"X-Webhook-Secret\", equalTo(\"secret123\"))\n        .withRequestBody(containing(\"event_type\"))\n        .willReturn(\n          aResponse()\n            .withStatus(200)\n            .withBody(\"Webhook received\")\n        )\n    }\n  }\n}\n</code></pre>"},{"location":"Components/04-wiremock/#behavioral-mocking","title":"Behavioral Mocking","text":"<p>Simulate service behavior changes over multiple calls:</p> <pre><code>test(\"service recovers from failure\") {\n  TestSystem.validate {\n    wiremock {\n      behaviourFor(\"/api/external-service\", WireMock::get) {\n        initially {\n          aResponse()\n            .withStatus(503)\n            .withBody(\"Service unavailable\")\n        }\n        then {\n          aResponse()\n            .withStatus(503)\n            .withBody(\"Still unavailable\")\n        }\n        then {\n          aResponse()\n            .withStatus(200)\n            .withHeader(\"Content-Type\", \"application/json\")\n            .withBody(it.serialize(ServiceResponse(status = \"OK\")))\n        }\n      }\n    }\n\n    http {\n      // First call - failure\n      getResponse(\"/api/external-service\") { response -&gt;\n        response.status shouldBe 503\n      }\n\n      // Second call - still failing\n      getResponse(\"/api/external-service\") { response -&gt;\n        response.status shouldBe 503\n      }\n\n      // Third call - success\n      get&lt;ServiceResponse&gt;(\"/api/external-service\") { response -&gt;\n        response.status shouldBe \"OK\"\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"Components/04-wiremock/#testing-circuit-breaker","title":"Testing Circuit Breaker","text":"<p>Test circuit breaker patterns with WireMock:</p> <pre><code>test(\"circuit breaker opens after failures\") {\n  TestSystem.validate {\n    wiremock {\n      // Mock service that fails\n      mockGet(\n        url = \"/api/unreliable-service\",\n        statusCode = 500,\n        responseBody = \"Internal Server Error\".some()\n      )\n    }\n\n    // Application calls the service multiple times\n    repeat(5) {\n      http {\n        getResponse(\"/api/call-external\") { response -&gt;\n          // First few calls fail\n          response.status shouldBe 500\n        }\n      }\n    }\n\n    // Update mock to return success\n    wiremock {\n      mockGet(\n        url = \"/api/unreliable-service\",\n        statusCode = 200,\n        responseBody = ServiceResponse(status = \"OK\").some()\n      )\n    }\n\n    // Circuit breaker should open, need to wait for recovery\n    delay(5.seconds)\n\n    http {\n      get&lt;ServiceResponse&gt;(\"/api/call-external\") { response -&gt;\n        response.status shouldBe \"OK\"\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"Components/04-wiremock/#complete-example","title":"Complete Example","text":"<p>Here's a complete test with multiple external service mocks:</p> <pre><code>test(\"should create order with external service validation\") {\n  TestSystem.validate {\n    val userId = \"user-123\"\n    val productId = \"product-456\"\n    val categoryId = 1\n\n    // Mock user service\n    wiremock {\n      mockGet(\n        url = \"/users/$userId\",\n        statusCode = 200,\n        responseBody = User(id = userId, name = \"John Doe\", active = true).some(),\n        responseHeaders = mapOf(\"X-Service\" to \"UserService\")\n      )\n    }\n\n    // Mock product catalog service\n    wiremock {\n      mockGet(\n        url = \"/products/$productId\",\n        statusCode = 200,\n        responseBody = Product(\n          id = productId,\n          name = \"Laptop\",\n          price = 999.99,\n          stock = 10\n        ).some()\n      )\n    }\n\n    // Mock category service\n    wiremock {\n      mockGet(\n        url = \"/categories/$categoryId\",\n        statusCode = 200,\n        responseBody = Category(id = categoryId, name = \"Electronics\", active = true).some()\n      )\n    }\n\n    // Mock inventory service (POST to reserve stock)\n    wiremock {\n      mockPost(\n        url = \"/inventory/reserve\",\n        statusCode = 200,\n        requestBody = ReserveStockRequest(productId = productId, quantity = 1).some(),\n        responseBody = ReservationResponse(reservationId = \"res-789\", success = true).some()\n      )\n    }\n\n    // Create order via your API\n    http {\n      postAndExpectBody&lt;OrderResponse&gt;(\n        uri = \"/orders\",\n        body = CreateOrderRequest(\n          userId = userId,\n          productId = productId,\n          quantity = 1\n        ).some()\n      ) { response -&gt;\n        response.status shouldBe 201\n        response.body().orderId shouldNotBe null\n        response.body().status shouldBe \"CREATED\"\n      }\n    }\n\n    // Verify order was stored\n    postgresql {\n      shouldQuery&lt;Order&gt;(\n        \"SELECT * FROM orders WHERE user_id = ?\",\n        mapper = { row -&gt;\n          Order(\n            id = row.long(\"id\"),\n            userId = row.string(\"user_id\"),\n            productId = row.string(\"product_id\"),\n            quantity = row.int(\"quantity\")\n          )\n        }\n      ) { orders -&gt;\n        orders.size shouldBe 1\n        orders.first().userId shouldBe userId\n        orders.first().productId shouldBe productId\n      }\n    }\n\n    // Verify event was published\n    kafka {\n      shouldBePublished&lt;OrderCreatedEvent&gt;(atLeastIn = 10.seconds) {\n        actual.userId == userId &amp;&amp;\n        actual.productId == productId\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"Components/04-wiremock/#error-scenarios","title":"Error Scenarios","text":"<p>Test how your application handles external service failures:</p> <pre><code>test(\"should handle external service unavailability\") {\n  TestSystem.validate {\n    // Mock external service returning 503\n    wiremock {\n      mockGet(\n        url = \"/external-api/data\",\n        statusCode = 503,\n        responseBody = ErrorResponse(\"Service temporarily unavailable\").some()\n      )\n    }\n\n    // Your application should handle this gracefully\n    http {\n      getResponse(\"/api/fetch-data\") { response -&gt;\n        response.status shouldBe 503 // or your fallback status\n      }\n    }\n  }\n}\n\ntest(\"should handle timeout\") {\n  TestSystem.validate {\n    wiremock {\n      mockGetConfigure(\"/slow-endpoint\") { builder, _ -&gt;\n        builder.willReturn(\n          aResponse()\n            .withStatus(200)\n            .withBody(\"Response\")\n            .withFixedDelay(5000) // 5 second delay\n        )\n      }\n    }\n\n    http {\n      getResponse(\"/api/call-slow-service\") { response -&gt;\n        // Your application should timeout and handle it\n        response.status shouldBe 504 // Gateway timeout\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"Components/04-wiremock/#integration-testing","title":"Integration Testing","text":"<p>Test complex integrations with multiple services:</p> <pre><code>test(\"should orchestrate multiple services\") {\n  TestSystem.validate {\n    val userId = \"user-123\"\n\n    // Mock authentication service\n    wiremock {\n      mockPost(\n        url = \"/auth/validate\",\n        statusCode = 200,\n        requestBody = TokenRequest(token = \"jwt-token\").some(),\n        responseBody = TokenValidation(valid = true, userId = userId).some()\n      )\n    }\n\n    // Mock permissions service\n    wiremock {\n      mockGet(\n        url = \"/permissions/$userId\",\n        statusCode = 200,\n        responseBody = Permissions(\n          userId = userId,\n          roles = listOf(\"USER\", \"ADMIN\")\n        ).some()\n      )\n    }\n\n    // Make authenticated request\n    http {\n      get&lt;SecureData&gt;(\n        uri = \"/api/secure-data\",\n        token = \"jwt-token\".some()\n      ) { data -&gt;\n        data.accessible shouldBe true\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"Components/04-wiremock/#request-verification","title":"Request Verification","text":"<p>Verify that requests were made as expected:</p> <pre><code>test(\"should verify request details\") {\n  TestSystem.validate {\n    wiremock {\n      mockPost(\n        url = \"/api/webhook\",\n        statusCode = 200,\n        metadata = mapOf(\n          \"X-Signature\" to \"expected-signature\"\n        )\n      )\n    }\n\n    // Trigger webhook\n    http {\n      postAndExpectBodilessResponse(\n        uri = \"/trigger-webhook\",\n        body = WebhookTrigger(event = \"user.created\").some()\n      ) { response -&gt;\n        response.status shouldBe 200\n      }\n    }\n\n    // Verify the webhook was called with correct signature\n    // (WireMock will only match if headers match)\n  }\n}\n</code></pre>"},{"location":"Components/05-http/","title":"HttpClient","text":"Gradle <pre><code>    dependencies {\n        testImplementation(\"com.trendyol:stove-testing-e2e-http:$version\")\n    }\n</code></pre>"},{"location":"Components/05-http/#configure","title":"Configure","text":"<p>After getting the library from the maven source, while configuring TestSystem you will have access to <code>http</code></p> <pre><code>TestSystem()\n  .with {\n    http {\n      HttpClientSystemOptions(\n        baseUrl = \"http://localhost:8080\",\n      )\n    }\n  }\n  .run()\n</code></pre> <p>The other options that you can set are: <pre><code>data class HttpClientSystemOptions(\n  /**\n   * Base URL of the HTTP client.\n   */\n  val baseUrl: String,\n\n  /**\n   * Content converter for the HTTP client. Default is JacksonConverter. You can use GsonConverter or any other converter.\n   * If you want to use your own converter, you can implement ContentConverter interface.\n   */\n  val contentConverter: ContentConverter = JacksonConverter(StoveSerde.jackson.default),\n\n  /**\n   * Timeout for the HTTP client. Default is 30 seconds.\n   */\n  val timeout: Duration = 30.seconds,\n\n  /**\n   * Create client function for the HTTP client. Default is jsonHttpClient.\n   */\n  val createClient: () -&gt; io.ktor.client.HttpClient = { jsonHttpClient(timeout, contentConverter) }\n)\n</code></pre></p>"},{"location":"Components/05-http/#usage","title":"Usage","text":""},{"location":"Components/05-http/#get-requests","title":"GET Requests","text":"<p>Making GET requests with various options:</p> <pre><code>TestSystem.validate {\n  http {\n    // Simple GET request with type-safe response\n    get&lt;UserResponse&gt;(\"/users/123\") { user -&gt;\n      user.id shouldBe 123\n      user.name shouldBe \"John Doe\"\n    }\n\n    // GET with query parameters\n    get&lt;String&gt;(\"/api/index\", queryParams = mapOf(\"keyword\" to \"search-term\")) { response -&gt;\n      response shouldContain \"search-term\"\n    }\n\n    // GET with headers\n    get&lt;UserProfile&gt;(\"/profile\", headers = mapOf(\"X-Custom-Header\" to \"value\")) { profile -&gt;\n      profile.email shouldNotBe null\n    }\n\n    // GET with authentication token\n    get&lt;SecureData&gt;(\"/secure-endpoint\", token = \"jwt-token\".some()) { data -&gt;\n      data.isAuthorized shouldBe true\n    }\n\n    // GET multiple items (list response)\n    getMany&lt;ProductResponse&gt;(\"/products\", queryParams = mapOf(\"page\" to \"1\", \"size\" to \"10\")) { products -&gt;\n      products.size shouldBe 10\n      products.first().name shouldNotBe null\n    }\n  }\n}\n</code></pre>"},{"location":"Components/05-http/#get-with-full-response-access","title":"GET with Full Response Access","text":"<p>When you need access to status code and headers:</p> <pre><code>TestSystem.validate {\n  http {\n    getResponse&lt;UserResponse&gt;(\"/users/123\") { response -&gt;\n      response.status shouldBe 200\n      response.headers[\"Content-Type\"] shouldContain \"application/json\"\n      response.body().id shouldBe 123\n    }\n\n    // Bodiless response (only status and headers)\n    getResponse(\"/health\") { response -&gt;\n      response.status shouldBe 200\n    }\n  }\n}\n</code></pre>"},{"location":"Components/05-http/#post-requests","title":"POST Requests","text":"<p>Various POST request patterns:</p> <pre><code>TestSystem.validate {\n  http {\n    // POST with request body and expect JSON response\n    postAndExpectJson&lt;UserResponse&gt;(\"/users\") {\n      CreateUserRequest(name = \"John\", email = \"john@example.com\")\n    } { user -&gt;\n      user.id shouldNotBe null\n      user.name shouldBe \"John\"\n    }\n\n    // POST and expect bodiless response (only status)\n    postAndExpectBodilessResponse(\n      uri = \"/products/activate\",\n      body = ActivateRequest(productId = 123).some()\n    ) { response -&gt;\n      response.status shouldBe 200\n    }\n\n    // POST with full response access\n    postAndExpectBody&lt;ProductResponse&gt;(\n      uri = \"/products\",\n      body = CreateProductRequest(name = \"Laptop\", price = 999.99).some()\n    ) { response -&gt;\n      response.status shouldBe 201\n      response.headers[\"Location\"] shouldNotBe null\n      response.body().id shouldNotBe null\n    }\n\n    // POST with headers and token\n    postAndExpectJson&lt;OrderResponse&gt;(\n      uri = \"/orders\",\n      body = CreateOrderRequest(items = listOf(\"item1\", \"item2\")).some(),\n      headers = mapOf(\"X-Request-ID\" to \"12345\"),\n      token = \"jwt-token\".some()\n    ) { order -&gt;\n      order.id shouldNotBe null\n      order.status shouldBe \"CREATED\"\n    }\n  }\n}\n</code></pre>"},{"location":"Components/05-http/#put-requests","title":"PUT Requests","text":"<p>Update operations with PUT:</p> <pre><code>TestSystem.validate {\n  http {\n    // PUT with response body\n    putAndExpectJson&lt;UserResponse&gt;(\"/users/123\") {\n      UpdateUserRequest(name = \"Jane Doe\", email = \"jane@example.com\")\n    } { user -&gt;\n      user.name shouldBe \"Jane Doe\"\n      user.email shouldBe \"jane@example.com\"\n    }\n\n    // PUT without response body\n    putAndExpectBodilessResponse(\n      uri = \"/products/123\",\n      body = UpdateProductRequest(name = \"Updated Product\").some()\n    ) { response -&gt;\n      response.status shouldBe 200\n    }\n\n    // PUT with full response access\n    putAndExpectBody&lt;ProductResponse&gt;(\n      uri = \"/products/456\",\n      body = UpdateProductRequest(price = 899.99).some()\n    ) { response -&gt;\n      response.status shouldBe 200\n      response.body().price shouldBe 899.99\n    }\n  }\n}\n</code></pre>"},{"location":"Components/05-http/#patch-requests","title":"PATCH Requests","text":"<p>Partial updates with PATCH:</p> <pre><code>TestSystem.validate {\n  http {\n    // PATCH with response body\n    patchAndExpectBody&lt;UserResponse&gt;(\n      uri = \"/users/123\",\n      body = mapOf(\"email\" to \"newemail@example.com\").some()\n    ) { response -&gt;\n      response.status shouldBe 200\n      response.body().email shouldBe \"newemail@example.com\"\n    }\n  }\n}\n</code></pre>"},{"location":"Components/05-http/#delete-requests","title":"DELETE Requests","text":"<p>Delete operations:</p> <pre><code>TestSystem.validate {\n  http {\n    // DELETE without response body\n    deleteAndExpectBodilessResponse(\"/users/123\") { response -&gt;\n      response.status shouldBe 204\n    }\n\n    // DELETE with authentication\n    deleteAndExpectBodilessResponse(\n      uri = \"/products/456\",\n      token = \"jwt-token\".some()\n    ) { response -&gt;\n      response.status shouldBe 200\n    }\n  }\n}\n</code></pre>"},{"location":"Components/05-http/#file-upload-with-multipart","title":"File Upload with Multipart","text":"<p>Upload files using multipart form data:</p> <pre><code>TestSystem.validate {\n  http {\n    postMultipartAndExpectResponse&lt;UploadResponse&gt;(\n      uri = \"/products/import\",\n      body = listOf(\n        StoveMultiPartContent.Text(\"productName\", \"Laptop\"),\n        StoveMultiPartContent.Text(\"description\", \"A powerful laptop\"),\n        StoveMultiPartContent.File(\n          param = \"file\",\n          fileName = \"products.csv\",\n          content = csvBytes,\n          contentType = MediaType.APPLICATION_OCTET_STREAM_VALUE\n        )\n      )\n    ) { response -&gt;\n      response.status shouldBe 200\n      response.body().uploadedFiles.size shouldBe 1\n      response.body().message shouldContain \"products.csv\"\n    }\n  }\n}\n</code></pre>"},{"location":"Components/05-http/#advanced-using-ktor-client-directly","title":"Advanced: Using Ktor Client Directly","text":"<p>For advanced scenarios, access the underlying Ktor HttpClient:</p> <pre><code>TestSystem.validate {\n  http {\n    client { baseUrl -&gt;\n      // Direct access to Ktor HttpClient\n      val response = get {\n        url(baseUrl.buildString() + \"/custom-endpoint\")\n        header(\"Custom-Header\", \"value\")\n      }\n      println(response.status)\n    }\n  }\n}\n</code></pre>"},{"location":"Components/05-http/#complete-example","title":"Complete Example","text":"<p>Here's a complete CRUD test example:</p> <pre><code>test(\"should perform CRUD operations on products\") {\n  TestSystem.validate {\n    var productId: Long? = null\n\n    // CREATE\n    http {\n      postAndExpectBody&lt;ProductResponse&gt;(\n        uri = \"/products\",\n        body = CreateProductRequest(name = \"Laptop\", price = 999.99, categoryId = 1).some()\n      ) { response -&gt;\n        response.status shouldBe 201\n        productId = response.body().id\n        response.body().name shouldBe \"Laptop\"\n      }\n    }\n\n    // READ\n    http {\n      get&lt;ProductResponse&gt;(\"/products/$productId\") { product -&gt;\n        product.id shouldBe productId\n        product.name shouldBe \"Laptop\"\n        product.price shouldBe 999.99\n      }\n    }\n\n    // UPDATE\n    http {\n      putAndExpectJson&lt;ProductResponse&gt;(\"/products/$productId\") {\n        UpdateProductRequest(price = 899.99)\n      } { product -&gt;\n        product.price shouldBe 899.99\n      }\n    }\n\n    // DELETE\n    http {\n      deleteAndExpectBodilessResponse(\"/products/$productId\") { response -&gt;\n        response.status shouldBe 204\n      }\n    }\n\n    // Verify deletion\n    http {\n      getResponse&lt;ErrorResponse&gt;(\"/products/$productId\") { response -&gt;\n        response.status shouldBe 404\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"Components/05-http/#integration-with-other-components","title":"Integration with Other Components","text":""},{"location":"Components/05-http/#http-database","title":"HTTP + Database","text":"<pre><code>TestSystem.validate {\n  // Create via API\n  val userId = http {\n    postAndExpectBody&lt;UserResponse&gt;(\"/users\", body = CreateUserRequest(name = \"John\").some()) { response -&gt;\n      response.body().id\n    }\n  }\n\n  // Verify in database\n  postgresql {\n    shouldQuery&lt;User&gt;(\"SELECT * FROM users WHERE id = $userId\") { users -&gt;\n      users.size shouldBe 1\n      users.first().name shouldBe \"John\"\n    }\n  }\n}\n</code></pre>"},{"location":"Components/05-http/#http-kafka","title":"HTTP + Kafka","text":"<pre><code>TestSystem.validate {\n  // Trigger event via API\n  http {\n    postAndExpectBodilessResponse(\"/orders\", body = CreateOrderRequest(amount = 100.0).some()) { response -&gt;\n      response.status shouldBe 201\n    }\n  }\n\n  // Verify event was published\n  kafka {\n    shouldBePublished&lt;OrderCreatedEvent&gt;(atLeastIn = 10.seconds) {\n      actual.amount == 100.0\n    }\n  }\n}\n</code></pre>"},{"location":"Components/05-http/#http-wiremock","title":"HTTP + WireMock","text":"<pre><code>TestSystem.validate {\n  // Mock external service\n  wiremock {\n    mockGet(\n      url = \"/external-api/data\",\n      statusCode = 200,\n      responseBody = ExternalData(id = 1, value = \"test\").some()\n    )\n  }\n\n  // Call your API that depends on external service\n  http {\n    get&lt;ResponseData&gt;(\"/data\") { response -&gt;\n      response.value shouldBe \"test\"\n    }\n  }\n}\n</code></pre>"},{"location":"Components/05-http/#error-handling","title":"Error Handling","text":"<pre><code>TestSystem.validate {\n  http {\n    // Test validation errors\n    postAndExpectBody&lt;ValidationErrorResponse&gt;(\"/users\", body = InvalidUserRequest().some()) { response -&gt;\n      response.status shouldBe 400\n      response.body().errors shouldContain \"name is required\"\n    }\n\n    // Test authentication errors\n    getResponse&lt;ErrorResponse&gt;(\"/secure-endpoint\") { response -&gt;\n      response.status shouldBe 401\n    }\n\n    // Test not found\n    getResponse&lt;ErrorResponse&gt;(\"/users/999999\") { response -&gt;\n      response.status shouldBe 404\n    }\n\n    // Test business logic errors\n    postAndExpectBody&lt;ErrorResponse&gt;(\"/products\", body = InvalidProductRequest().some()) { response -&gt;\n      response.status shouldBe 409 // Conflict\n      response.body().message shouldContain \"already exists\"\n    }\n  }\n}\n</code></pre>"},{"location":"Components/06-postgresql/","title":"Postgresql","text":"Gradle <pre><code>    dependencies {\n        testImplementation(\"com.trendyol:stove-testing-e2e-rdbms-postgres:$version\")\n    }\n</code></pre>"},{"location":"Components/06-postgresql/#configure","title":"Configure","text":"<pre><code>TestSystem()\n  .with {\n    postgresql {\n      PostgresqlSystemOptions {\n        listOf(\n          \"postgresql.host=${it.host}\",\n          \"postgresql.port=${it.port}\",\n          \"postgresql.database=${it.database}\",\n          \"postgresql.username=${it.username}\",\n          \"postgresql.password=${it.password}\"\n        )\n      }\n    }\n  }.run()\n</code></pre>"},{"location":"Components/06-postgresql/#migrations","title":"Migrations","text":"<p>Stove provides a way to run database migrations before tests start:</p> <pre><code>class InitialMigration : DatabaseMigration&lt;PostgresSqlMigrationContext&gt; {\n  override val order: Int = 1\n\n  override suspend fun execute(connection: PostgresSqlMigrationContext) {\n    connection.operations.execute(\n      \"\"\"\n      CREATE TABLE IF NOT EXISTS users (\n        id serial PRIMARY KEY,\n        name VARCHAR(100) NOT NULL,\n        email VARCHAR(100) NOT NULL UNIQUE,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n      );\n      \"\"\".trimIndent()\n    )\n  }\n}\n</code></pre> <p>Register migrations in your TestSystem configuration:</p> <pre><code>TestSystem()\n  .with {\n    postgresql {\n      PostgresqlOptions(\n        databaseName = \"testing\",\n        configureExposedConfiguration = { cfg -&gt;\n          listOf(\n            \"spring.datasource.url=${cfg.jdbcUrl}\",\n            \"spring.datasource.username=${cfg.username}\",\n            \"spring.datasource.password=${cfg.password}\"\n          )\n        }\n      ).migrations {\n        register&lt;InitialMigration&gt;()\n      }\n    }\n  }\n  .run()\n</code></pre>"},{"location":"Components/06-postgresql/#usage","title":"Usage","text":""},{"location":"Components/06-postgresql/#executing-sql","title":"Executing SQL","text":"<p>Execute DDL and DML statements:</p> <pre><code>TestSystem.validate {\n  postgresql {\n    // Create tables\n    shouldExecute(\n      \"\"\"\n      DROP TABLE IF EXISTS products;\n      CREATE TABLE IF NOT EXISTS products (\n        id serial PRIMARY KEY,\n        name VARCHAR(100) NOT NULL,\n        price DECIMAL(10, 2) NOT NULL,\n        stock INT DEFAULT 0\n      );\n      \"\"\".trimIndent()\n    )\n\n    // Insert data\n    shouldExecute(\n      \"\"\"\n      INSERT INTO products (name, price, stock) \n      VALUES ('Laptop', 999.99, 10)\n      \"\"\".trimIndent()\n    )\n\n    // Update data\n    shouldExecute(\"UPDATE products SET stock = 5 WHERE name = 'Laptop'\")\n\n    // Delete data\n    shouldExecute(\"DELETE FROM products WHERE stock = 0\")\n  }\n}\n</code></pre>"},{"location":"Components/06-postgresql/#querying-data","title":"Querying Data","text":"<p>Query data with type-safe mappers:</p> <pre><code>data class Product(\n  val id: Long,\n  val name: String,\n  val price: Double,\n  val stock: Int\n)\n\nTestSystem.validate {\n  postgresql {\n    shouldQuery&lt;Product&gt;(\n      query = \"SELECT * FROM products WHERE price &gt; 500\",\n      mapper = { row -&gt;\n        Product(\n          id = row.long(\"id\"),\n          name = row.string(\"name\"),\n          price = row.double(\"price\"),\n          stock = row.int(\"stock\")\n        )\n      }\n    ) { products -&gt;\n      products.size shouldBeGreaterThan 0\n      products.all { it.price &gt; 500 } shouldBe true\n    }\n  }\n}\n</code></pre>"},{"location":"Components/06-postgresql/#query-with-parameters","title":"Query with Parameters","text":"<p>Use parameterized queries for safety:</p> <pre><code>TestSystem.validate {\n  postgresql {\n    val minPrice = 100.0\n    shouldQuery&lt;Product&gt;(\n      query = \"SELECT * FROM products WHERE price &gt;= ?\",\n      mapper = { row -&gt;\n        Product(\n          id = row.long(\"id\"),\n          name = row.string(\"name\"),\n          price = row.double(\"price\"),\n          stock = row.int(\"stock\")\n        )\n      }\n    ) { products -&gt;\n      products.all { it.price &gt;= minPrice } shouldBe true\n    }\n  }\n}\n</code></pre>"},{"location":"Components/06-postgresql/#working-with-nullable-fields","title":"Working with Nullable Fields","text":"<p>Handle nullable columns:</p> <pre><code>data class User(\n  val id: Long,\n  val name: String,\n  val email: String?,\n  val phone: String?\n)\n\nTestSystem.validate {\n  postgresql {\n    shouldQuery&lt;User&gt;(\n      query = \"SELECT * FROM users\",\n      mapper = { row -&gt;\n        User(\n          id = row.long(\"id\"),\n          name = row.string(\"name\"),\n          email = row.stringOrNull(\"email\"),\n          phone = row.stringOrNull(\"phone\")\n        )\n      }\n    ) { users -&gt;\n      users.size shouldBeGreaterThan 0\n    }\n  }\n}\n</code></pre>"},{"location":"Components/06-postgresql/#complex-queries","title":"Complex Queries","text":"<p>Execute joins and aggregations:</p> <pre><code>data class OrderSummary(\n  val userId: Long,\n  val userName: String,\n  val totalOrders: Int,\n  val totalAmount: Double\n)\n\nTestSystem.validate {\n  postgresql {\n    shouldQuery&lt;OrderSummary&gt;(\n      query = \"\"\"\n        SELECT \n          u.id as user_id,\n          u.name as user_name,\n          COUNT(o.id) as total_orders,\n          SUM(o.amount) as total_amount\n        FROM users u\n        LEFT JOIN orders o ON u.id = o.user_id\n        GROUP BY u.id, u.name\n        HAVING COUNT(o.id) &gt; 0\n      \"\"\".trimIndent(),\n      mapper = { row -&gt;\n        OrderSummary(\n          userId = row.long(\"user_id\"),\n          userName = row.string(\"user_name\"),\n          totalOrders = row.int(\"total_orders\"),\n          totalAmount = row.double(\"total_amount\")\n        )\n      }\n    ) { summaries -&gt;\n      summaries.all { it.totalOrders &gt; 0 } shouldBe true\n    }\n  }\n}\n</code></pre>"},{"location":"Components/06-postgresql/#pause-and-unpause-container","title":"Pause and Unpause Container","text":"<p>Test failure scenarios:</p> <pre><code>TestSystem.validate {\n  postgresql {\n    // Database is running\n    shouldQuery&lt;Product&gt;(\n      \"SELECT COUNT(*) as count FROM products\",\n      mapper = { row -&gt; row.int(\"count\") }\n    ) { result -&gt;\n      result.first() shouldBeGreaterThanOrEqual 0\n    }\n\n    // Pause the database\n    pause()\n\n    // Your application should handle the failure\n    // ...\n\n    // Unpause the database\n    unpause()\n\n    // Verify recovery\n    shouldQuery&lt;Product&gt;(\n      \"SELECT COUNT(*) as count FROM products\",\n      mapper = { row -&gt; row.int(\"count\") }\n    ) { result -&gt;\n      result.first() shouldBeGreaterThanOrEqual 0\n    }\n  }\n}\n</code></pre>"},{"location":"Components/06-postgresql/#complete-example","title":"Complete Example","text":"<p>Here's a complete end-to-end test:</p> <pre><code>test(\"should create user via API and verify in database\") {\n  TestSystem.validate {\n    val userName = \"John Doe\"\n    val userEmail = \"john@example.com\"\n\n    // Create user via API\n    http {\n      postAndExpectBody&lt;UserResponse&gt;(\n        uri = \"/users\",\n        body = CreateUserRequest(name = userName, email = userEmail).some()\n      ) { response -&gt;\n        response.status shouldBe 201\n        response.body().name shouldBe userName\n      }\n    }\n\n    // Verify in PostgreSQL\n    postgresql {\n      shouldQuery&lt;User&gt;(\n        query = \"SELECT * FROM users WHERE email = ?\",\n        mapper = { row -&gt;\n          User(\n            id = row.long(\"id\"),\n            name = row.string(\"name\"),\n            email = row.string(\"email\")\n          )\n        }\n      ) { users -&gt;\n        users.size shouldBe 1\n        users.first().name shouldBe userName\n        users.first().email shouldBe userEmail\n      }\n    }\n\n    // Verify event was published\n    kafka {\n      shouldBePublished&lt;UserCreatedEvent&gt;(atLeastIn = 10.seconds) {\n        actual.name == userName &amp;&amp;\n        actual.email == userEmail\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"Components/06-postgresql/#integration-with-application","title":"Integration with Application","text":"<p>Use the bridge to access application components:</p> <pre><code>test(\"should use repository to save user\") {\n  TestSystem.validate {\n    val user = User(id = 1L, name = \"Jane Doe\", email = \"jane@example.com\")\n\n    // Use application's repository\n    using&lt;UserRepository&gt; {\n      save(user)\n    }\n\n    // Verify in database\n    postgresql {\n      shouldQuery&lt;User&gt;(\n        query = \"SELECT * FROM users WHERE id = ?\",\n        mapper = { row -&gt;\n          User(\n            id = row.long(\"id\"),\n            name = row.string(\"name\"),\n            email = row.string(\"email\")\n          )\n        }\n      ) { users -&gt;\n        users.size shouldBe 1\n        users.first().name shouldBe \"Jane Doe\"\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"Components/06-postgresql/#batch-operations","title":"Batch Operations","text":"<p>Execute multiple operations:</p> <pre><code>TestSystem.validate {\n  postgresql {\n    // Create tables\n    shouldExecute(\n      \"\"\"\n      CREATE TABLE IF NOT EXISTS categories (\n        id serial PRIMARY KEY,\n        name VARCHAR(50) NOT NULL\n      );\n      CREATE TABLE IF NOT EXISTS products (\n        id serial PRIMARY KEY,\n        name VARCHAR(100) NOT NULL,\n        category_id INT REFERENCES categories(id)\n      );\n      \"\"\".trimIndent()\n    )\n\n    // Insert categories\n    listOf(\"Electronics\", \"Books\", \"Clothing\").forEach { category -&gt;\n      shouldExecute(\"INSERT INTO categories (name) VALUES ('$category')\")\n    }\n\n    // Verify all inserted\n    shouldQuery&lt;String&gt;(\n      \"SELECT name FROM categories\",\n      mapper = { it.string(\"name\") }\n    ) { categories -&gt;\n      categories.size shouldBe 3\n      categories shouldContain \"Electronics\"\n      categories shouldContain \"Books\"\n    }\n  }\n}\n</code></pre>"},{"location":"Components/06-postgresql/#advanced-direct-sql-operations","title":"Advanced: Direct SQL Operations","text":"<p>Access SQL operations directly for advanced use cases:</p> <pre><code>TestSystem.validate {\n  postgresql {\n    val ops = operations()\n\n    // Execute with parameters\n    ops.execute(\n      \"INSERT INTO users (name, email) VALUES (?, ?)\",\n      Parameter(\"name\", \"Alice\"),\n      Parameter(\"email\", \"alice@example.com\")\n    )\n\n    // Custom select operation\n    val users = ops.select(\"SELECT * FROM users\") { row -&gt;\n      User(\n        id = row.long(\"id\"),\n        name = row.string(\"name\"),\n        email = row.string(\"email\")\n      )\n    }\n\n    users.size shouldBeGreaterThan 0\n  }\n}\n</code></pre>"},{"location":"Components/07-mongodb/","title":"Mongodb","text":"Gradle <pre><code>    dependencies {\n        testImplementation(\"com.trendyol:stove-testing-e2e-mongodb:$version\")\n    }\n</code></pre>"},{"location":"Components/07-mongodb/#configure","title":"Configure","text":"<pre><code>TestSystem()\n  .with {\n    mongodb {\n      MongodbSystemOptions(\n        listOf(\n          \"mongodb.host=${it.host}\",\n          \"mongodb.port=${it.port}\",\n          \"mongodb.database=${it.database}\",\n          \"mongodb.username=${it.username}\",\n          \"mongodb.password=${it.password}\"\n        )\n      )\n    }\n  }\n  .run()\n</code></pre>"},{"location":"Components/07-mongodb/#usage","title":"Usage","text":"<pre><code>test(\"should save and get with string objectId\") {\n  val id = ObjectId()\n  validate {\n    mongodb {\n      save(\n        ExampleInstanceWithStringObjectId(\n          id = id.toHexString(),\n          aggregateId = id.toHexString(),\n          description = testCase.name.name\n        ),\n        id.toHexString()\n      )\n      shouldGet&lt;ExampleInstanceWithStringObjectId&gt;(id.toHexString()) { actual -&gt;\n        actual.aggregateId shouldBe id.toHexString()\n        actual.description shouldBe testCase.name.name\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"Components/08-mssql/","title":"Postgresql","text":"Gradle <pre><code>    dependencies {\n        testImplementation(\"com.trendyol:stove-testing-e2e-rdbms-mssql:$version\")\n    }\n</code></pre>"},{"location":"Components/08-mssql/#configure","title":"Configure","text":"<pre><code>TestSystem()\n  .with {\n    mssql {\n      MssqlSystemOptions {\n        listOf(\n          \"mssql.host=${it.host}\",\n          \"mssql.port=${it.port}\",\n          \"mssql.database=${it.database}\",\n          \"mssql.username=${it.username}\",\n          \"mssql.password=${it.password}\"\n        )\n      }\n    }\n  }.run()\n</code></pre>"},{"location":"Components/08-mssql/#usage","title":"Usage","text":"<pre><code>validate {\n  mssql {\n    ops {\n      val result = select(\"SELECT 1\") {\n        it.getInt(1)\n      }\n      result.first() shouldBe 1\n    }\n    shouldExecute(\"insert into Person values (1, 'Doe', 'John', '123 Main St', 'Springfield')\")\n    shouldQuery&lt;Person&gt;(\n      query = \"select * from Person\",\n      mapper = {\n        Person(\n          it.getInt(1),\n          it.getString(2),\n          it.getString(3),\n          it.getString(4),\n          it.getString(5)\n        )\n      }\n    ) { result -&gt;\n      result.size shouldBe 1\n      result.first().apply {\n        personId shouldBe 1\n        lastName shouldBe \"Doe\"\n        firstName shouldBe \"John\"\n        address shouldBe \"123 Main St\"\n        city shouldBe \"Springfield\"\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"Components/09-redis/","title":"Redis","text":"Gradle <pre><code>    dependencies {\n        testImplementation(\"com.trendyol:stove-testing-e2e-redis:$version\")\n    }\n</code></pre>"},{"location":"Components/09-redis/#configure","title":"Configure","text":"<pre><code>TestSystem()\n  .with {\n    redis {\n      RedisSystemOptions {\n        listOf(\n          \"redis.host=${it.host}\",\n          \"redis.port=${it.port}\",\n          \"redis.password=${it.password}\"\n        )\n      }\n    }\n  }.run()\n</code></pre>"},{"location":"Components/09-redis/#usage","title":"Usage","text":"<p>The Redis component provides access to the underlying Lettuce Redis client, allowing you to test all Redis operations.</p>"},{"location":"Components/09-redis/#accessing-the-redis-client","title":"Accessing the Redis Client","text":"<p>Access the Redis client using the <code>client()</code> extension function:</p> <pre><code>TestSystem.validate {\n  redis {\n    val redisClient = client()\n    val connection = redisClient.connect()\n    // Use the connection for Redis operations\n    connection.close()\n  }\n}\n</code></pre>"},{"location":"Components/09-redis/#string-operations","title":"String Operations","text":"<p>Test basic string operations:</p> <pre><code>TestSystem.validate {\n  redis {\n    val connection = client().connect().sync()\n\n    // SET and GET\n    connection.set(\"user:123:name\", \"John Doe\")\n    val name = connection.get(\"user:123:name\")\n    name shouldBe \"John Doe\"\n\n    // SET with expiration\n    connection.setex(\"session:abc\", 3600, \"session-data\")\n    val ttl = connection.ttl(\"session:abc\")\n    ttl shouldBeGreaterThan 0\n\n    // INCREMENT\n    connection.set(\"counter\", \"0\")\n    connection.incr(\"counter\")\n    connection.incr(\"counter\")\n    val counter = connection.get(\"counter\")\n    counter shouldBe \"2\"\n\n    // Multiple keys\n    connection.mset(mapOf(\n      \"key1\" to \"value1\",\n      \"key2\" to \"value2\",\n      \"key3\" to \"value3\"\n    ))\n    val values = connection.mget(\"key1\", \"key2\", \"key3\")\n    values.size shouldBe 3\n  }\n}\n</code></pre>"},{"location":"Components/09-redis/#hash-operations","title":"Hash Operations","text":"<p>Test Redis hash operations:</p> <pre><code>TestSystem.validate {\n  redis {\n    val connection = client().connect().sync()\n\n    // HSET and HGET\n    connection.hset(\"user:123\", \"name\", \"John Doe\")\n    connection.hset(\"user:123\", \"email\", \"john@example.com\")\n    connection.hset(\"user:123\", \"age\", \"30\")\n\n    val name = connection.hget(\"user:123\", \"name\")\n    name shouldBe \"John Doe\"\n\n    // HGETALL\n    val user = connection.hgetall(\"user:123\")\n    user[\"name\"] shouldBe \"John Doe\"\n    user[\"email\"] shouldBe \"john@example.com\"\n    user[\"age\"] shouldBe \"30\"\n\n    // HMSET\n    connection.hmset(\"product:456\", mapOf(\n      \"name\" to \"Laptop\",\n      \"price\" to \"999.99\",\n      \"stock\" to \"10\"\n    ))\n\n    // HINCRBY\n    connection.hincrby(\"product:456\", \"stock\", -1)\n    val stock = connection.hget(\"product:456\", \"stock\")\n    stock shouldBe \"9\"\n\n    // HDEL\n    connection.hdel(\"user:123\", \"age\")\n    val age = connection.hget(\"user:123\", \"age\")\n    age shouldBe null\n  }\n}\n</code></pre>"},{"location":"Components/09-redis/#list-operations","title":"List Operations","text":"<p>Test Redis list operations:</p> <pre><code>TestSystem.validate {\n  redis {\n    val connection = client().connect().sync()\n\n    // LPUSH and RPUSH\n    connection.rpush(\"queue:tasks\", \"task1\", \"task2\", \"task3\")\n    connection.lpush(\"queue:tasks\", \"urgent-task\")\n\n    // LRANGE\n    val tasks = connection.lrange(\"queue:tasks\", 0, -1)\n    tasks.size shouldBe 4\n    tasks.first() shouldBe \"urgent-task\"\n\n    // LPOP and RPOP\n    val firstTask = connection.lpop(\"queue:tasks\")\n    firstTask shouldBe \"urgent-task\"\n\n    val lastTask = connection.rpop(\"queue:tasks\")\n    lastTask shouldBe \"task3\"\n\n    // LLEN\n    val length = connection.llen(\"queue:tasks\")\n    length shouldBe 2\n  }\n}\n</code></pre>"},{"location":"Components/09-redis/#set-operations","title":"Set Operations","text":"<p>Test Redis set operations:</p> <pre><code>TestSystem.validate {\n  redis {\n    val connection = client().connect().sync()\n\n    // SADD\n    connection.sadd(\"tags:123\", \"kotlin\", \"testing\", \"redis\")\n\n    // SMEMBERS\n    val tags = connection.smembers(\"tags:123\")\n    tags.size shouldBe 3\n    tags shouldContain \"kotlin\"\n\n    // SISMEMBER\n    val isKotlin = connection.sismember(\"tags:123\", \"kotlin\")\n    isKotlin shouldBe true\n\n    // SREM\n    connection.srem(\"tags:123\", \"redis\")\n    val remainingTags = connection.smembers(\"tags:123\")\n    remainingTags.size shouldBe 2\n\n    // Set operations\n    connection.sadd(\"set1\", \"a\", \"b\", \"c\")\n    connection.sadd(\"set2\", \"b\", \"c\", \"d\")\n\n    // SINTER (intersection)\n    val intersection = connection.sinter(\"set1\", \"set2\")\n    intersection.size shouldBe 2\n    intersection shouldContain \"b\"\n    intersection shouldContain \"c\"\n\n    // SUNION\n    val union = connection.sunion(\"set1\", \"set2\")\n    union.size shouldBe 4\n  }\n}\n</code></pre>"},{"location":"Components/09-redis/#sorted-set-operations","title":"Sorted Set Operations","text":"<p>Test Redis sorted set operations:</p> <pre><code>TestSystem.validate {\n  redis {\n    val connection = client().connect().sync()\n\n    // ZADD\n    connection.zadd(\"leaderboard\", 100.0, \"player1\")\n    connection.zadd(\"leaderboard\", 250.0, \"player2\")\n    connection.zadd(\"leaderboard\", 175.0, \"player3\")\n\n    // ZRANGE (ascending)\n    val ascending = connection.zrange(\"leaderboard\", 0, -1)\n    ascending.size shouldBe 3\n    ascending.first() shouldBe \"player1\"\n    ascending.last() shouldBe \"player2\"\n\n    // ZREVRANGE (descending)\n    val descending = connection.zrevrange(\"leaderboard\", 0, -1)\n    descending.first() shouldBe \"player2\"\n\n    // ZSCORE\n    val score = connection.zscore(\"leaderboard\", \"player2\")\n    score shouldBe 250.0\n\n    // ZRANK\n    val rank = connection.zrank(\"leaderboard\", \"player3\")\n    rank shouldBe 1L // 0-indexed\n\n    // ZINCRBY\n    connection.zincrby(\"leaderboard\", 50.0, \"player1\")\n    val newScore = connection.zscore(\"leaderboard\", \"player1\")\n    newScore shouldBe 150.0\n  }\n}\n</code></pre>"},{"location":"Components/09-redis/#async-operations","title":"Async Operations","text":"<p>Use async operations for better performance:</p> <pre><code>TestSystem.validate {\n  redis {\n    val connection = client().connect().async()\n\n    // Async SET\n    val setFuture = connection.set(\"async:key\", \"async:value\")\n    setFuture.await() shouldBe \"OK\"\n\n    // Async GET\n    val getFuture = connection.get(\"async:key\")\n    val value = getFuture.await()\n    value shouldBe \"async:value\"\n\n    // Pipeline multiple operations\n    connection.setAutoFlushCommands(false)\n    val futures = listOf(\n      connection.set(\"key1\", \"value1\"),\n      connection.set(\"key2\", \"value2\"),\n      connection.set(\"key3\", \"value3\")\n    )\n    connection.flushCommands()\n\n    futures.forEach { it.await() shouldBe \"OK\" }\n  }\n}\n</code></pre>"},{"location":"Components/09-redis/#pubsub-operations","title":"Pub/Sub Operations","text":"<p>Test Redis Pub/Sub:</p> <pre><code>TestSystem.validate {\n  redis {\n    val pubConnection = client().connectPubSub().sync()\n    val subConnection = client().connectPubSub().sync()\n\n    // Subscribe to channel\n    val messages = mutableListOf&lt;String&gt;()\n    subConnection.addListener(object : RedisPubSubAdapter&lt;String, String&gt;() {\n      override fun message(channel: String, message: String) {\n        messages.add(message)\n      }\n    })\n\n    subConnection.subscribe(\"notifications\")\n\n    // Publish messages\n    pubConnection.publish(\"notifications\", \"User logged in\")\n    pubConnection.publish(\"notifications\", \"Order created\")\n\n    // Wait for messages\n    delay(1.seconds)\n\n    messages.size shouldBe 2\n    messages shouldContain \"User logged in\"\n    messages shouldContain \"Order created\"\n\n    subConnection.unsubscribe(\"notifications\")\n  }\n}\n</code></pre>"},{"location":"Components/09-redis/#expiration-and-ttl","title":"Expiration and TTL","text":"<p>Test key expiration:</p> <pre><code>TestSystem.validate {\n  redis {\n    val connection = client().connect().sync()\n\n    // Set with expiration\n    connection.setex(\"temp:data\", 5, \"temporary-value\")\n\n    // Check TTL\n    val ttl = connection.ttl(\"temp:data\")\n    ttl shouldBeGreaterThan 0\n    ttl shouldBeLessThanOrEqual 5\n\n    // Set expiration on existing key\n    connection.set(\"permanent\", \"data\")\n    connection.expire(\"permanent\", 10)\n    val newTtl = connection.ttl(\"permanent\")\n    newTtl shouldBeGreaterThan 0\n\n    // Remove expiration\n    connection.persist(\"permanent\")\n    val persistedTtl = connection.ttl(\"permanent\")\n    persistedTtl shouldBe -1 // No expiration\n  }\n}\n</code></pre>"},{"location":"Components/09-redis/#transactions","title":"Transactions","text":"<p>Test Redis transactions:</p> <pre><code>TestSystem.validate {\n  redis {\n    val connection = client().connect().sync()\n\n    connection.multi()\n    connection.set(\"account:1:balance\", \"1000\")\n    connection.decrby(\"account:1:balance\", 100)\n    connection.incrby(\"account:2:balance\", 100)\n    val results = connection.exec()\n\n    results.size shouldBe 3\n\n    val balance1 = connection.get(\"account:1:balance\")\n    balance1 shouldBe \"900\"\n\n    val balance2 = connection.get(\"account:2:balance\")\n    balance2 shouldBe \"100\"\n  }\n}\n</code></pre>"},{"location":"Components/09-redis/#pause-and-unpause-container","title":"Pause and Unpause Container","text":"<p>Test failure scenarios:</p> <pre><code>TestSystem.validate {\n  redis {\n    val connection = client().connect().sync()\n\n    // Redis is running\n    connection.set(\"test\", \"value\")\n    connection.get(\"test\") shouldBe \"value\"\n\n    // Pause container\n    pause()\n\n    // Operations should fail\n    shouldThrow&lt;RedisException&gt; {\n      connection.get(\"test\")\n    }\n\n    // Unpause container\n    unpause()\n\n    // Wait for recovery\n    delay(2.seconds)\n\n    // Operations should work again\n    val value = connection.get(\"test\")\n    value shouldBe \"value\"\n  }\n}\n</code></pre>"},{"location":"Components/09-redis/#complete-example","title":"Complete Example","text":"<p>Here's a complete caching test example:</p> <pre><code>test(\"should cache product data in redis\") {\n  TestSystem.validate {\n    val productId = \"product-123\"\n    val connection = redis { client().connect().sync() }\n\n    // Product not in cache\n    val cached = connection.get(\"cache:product:$productId\")\n    cached shouldBe null\n\n    // Fetch from database and cache\n    http {\n      get&lt;ProductResponse&gt;(\"/products/$productId\") { product -&gt;\n        product.id shouldBe productId\n        product.name shouldNotBe null\n\n        // Store in Redis cache\n        redis {\n          val conn = client().connect().sync()\n          conn.setex(\n            \"cache:product:$productId\",\n            3600, // 1 hour TTL\n            objectMapper.writeValueAsString(product)\n          )\n        }\n      }\n    }\n\n    // Verify cached\n    redis {\n      val conn = client().connect().sync()\n      val cachedData = conn.get(\"cache:product:$productId\")\n      cachedData shouldNotBe null\n\n      val cachedProduct = objectMapper.readValue(cachedData, ProductResponse::class.java)\n      cachedProduct.id shouldBe productId\n    }\n\n    // Verify TTL is set\n    redis {\n      val conn = client().connect().sync()\n      val ttl = conn.ttl(\"cache:product:$productId\")\n      ttl shouldBeGreaterThan 0\n      ttl shouldBeLessThanOrEqual 3600\n    }\n  }\n}\n</code></pre>"},{"location":"Components/09-redis/#integration-with-application","title":"Integration with Application","text":"<p>Test application caching behavior:</p> <pre><code>test(\"should use redis for session management\") {\n  TestSystem.validate {\n    val sessionId = UUID.randomUUID().toString()\n\n    // Create session via API\n    http {\n      postAndExpectBody&lt;SessionResponse&gt;(\n        uri = \"/auth/login\",\n        body = LoginRequest(username = \"user\", password = \"pass\").some()\n      ) { response -&gt;\n        response.status shouldBe 200\n        response.body().sessionId shouldBe sessionId\n      }\n    }\n\n    // Verify session in Redis\n    redis {\n      val connection = client().connect().sync()\n      val sessionData = connection.get(\"session:$sessionId\")\n      sessionData shouldNotBe null\n\n      val session = objectMapper.readValue(sessionData, Session::class.java)\n      session.username shouldBe \"user\"\n      session.createdAt shouldNotBe null\n    }\n\n    // Use session\n    http {\n      get&lt;UserProfile&gt;(\n        uri = \"/profile\",\n        headers = mapOf(\"X-Session-ID\" to sessionId)\n      ) { profile -&gt;\n        profile.username shouldBe \"user\"\n      }\n    }\n\n    // Logout\n    http {\n      postAndExpectBodilessResponse(\n        uri = \"/auth/logout\",\n        body = LogoutRequest(sessionId = sessionId).some()\n      ) { response -&gt;\n        response.status shouldBe 200\n      }\n    }\n\n    // Verify session removed from Redis\n    redis {\n      val connection = client().connect().sync()\n      val sessionData = connection.get(\"session:$sessionId\")\n      sessionData shouldBe null\n    }\n  }\n}\n</code></pre>"},{"location":"Components/09-redis/#advanced-custom-extensions","title":"Advanced: Custom Extensions","text":"<p>Create reusable extensions for common patterns:</p> <pre><code>// Custom extension functions\nfun RedisSystem.shouldGet(key: String, assertion: (String?) -&gt; Unit): RedisSystem {\n  val connection = client().connect().sync()\n  val value = connection.get(key)\n  assertion(value)\n  return this\n}\n\nfun RedisSystem.shouldSet(key: String, value: String): RedisSystem {\n  val connection = client().connect().sync()\n  connection.set(key, value)\n  return this\n}\n\n// Usage in tests\nTestSystem.validate {\n  redis {\n    shouldSet(\"user:123\", \"John Doe\")\n    shouldGet(\"user:123\") { value -&gt;\n      value shouldBe \"John Doe\"\n    }\n  }\n}\n</code></pre>"},{"location":"Components/10-bridge/","title":"Bridge","text":"<p>Bridge component is used for accessing the DI container of the application. When the application is started, the bridge is created and the DI container is accessed in the tests.</p> <p>If you want to access to the beans of the application, you can simply do:</p> <pre><code>// setup\nTestSystem()\n  .with {\n    //other deps...\n    bridge()\n  }\n\n// while writing tests\nvalidate {\n  using&lt;YourBean&gt; {\n    this.doSomething()\n  }\n\n  using&lt;Bean1, Bean2&gt; { bean1, bean2 -&gt;\n    bean1.doSomething()\n    bean2.doSomething()\n  }\n}\n</code></pre> <p>Both Spring-Boot and Ktor have <code>bridge</code> function built-in, so you don't have to add any extra dependency than <code>com-trendyol:stove-ktor-testing-e2e</code> or <code>com-trendyol-stove-spring-testing-e2e</code>. If you are using Spring-Boot, the bridge will be referring to the<code>ApplicationContext</code> and if you are using Ktor, it will be referring to the <code>Application</code>.</p>"},{"location":"migration/notes/","title":"Migration Notes","text":""},{"location":"migration/notes/#from-014x-to-015x","title":"From 0.14.x to 0.15.x","text":""},{"location":"migration/notes/#breaking-changes","title":"Breaking Changes","text":"<p>The most notable breaking change is ser/de operations. The framework was only relying on Jackson for serialization and deserialization. Now, it provides a way to use other serialization libraries. <code>StoveSerde&lt;TIn, TOut&gt;</code> is the new interface that you can implement to provide your own serialization and deserialization logic.</p> <p><code>StoveSerde</code> also provides the access to the other serializers that <code>com-trendyol:stove-testing-e2e</code> package has.</p> <ul> <li>Jackson</li> <li>Gson</li> <li>Kotlinx</li> </ul> <p>Also look at ser/de section: Serialization and Deserialization</p>"},{"location":"migration/notes/#spring-kafka-com-trendyolstove-spring-testing-e2e-kafka","title":"Spring Kafka (com-trendyol:stove-spring-testing-e2e-kafka)","text":"<p>The <code>TestSystemKafkaInterceptor</code> now depends on <code>StoveSerde</code> to provide the serialization and deserialization logic instead of <code>ObjectMapper</code>.</p> <p>You can of course use your default Jackson implementation by providing the <code>ObjectMapperConfig.default()</code> to the <code>StoveSerde.jackson.anyByteArraySerde</code> function.</p> <pre><code>class TestSystemInitializer : BaseApplicationContextInitializer({\n  bean&lt;TestSystemKafkaInterceptor&lt;*, *&gt;&gt;(isPrimary = true)\n  bean { StoveSerde.jackson.anyByteArraySerde(ObjectMapperConfig.default()) } // or any other serde that is &lt;Any, ByteArray&gt;\n})\n</code></pre>"},{"location":"migration/notes/#standalone-kafka","title":"Standalone Kafka","text":"<pre><code>kafka {\n  KafkaSystemOptions(\n    serde = StoveSerde.jackson.anyByteArraySerde(ObjectMapperConfig.default) // or any other serde that is &lt;Any, ByteArray&gt;\n    //...\n  )\n}\n</code></pre>"},{"location":"migration/notes/#couchbase","title":"Couchbase","text":"<pre><code>couchbase {\n  CouchbaseSystemOptions(\n    clusterSerDe = JacksonJsonSerializer(CouchbaseConfiguration.objectMapper), // here you can provide your own serde\n    //...\n  )\n}\n</code></pre>"},{"location":"migration/notes/#http","title":"Http","text":"<pre><code> httpClient {\n  HttpClientSystemOptions(\n    baseUrl = \"http://localhost:8001\",\n    contentConverter = JacksonConverter(ObjectMapperConfig.default)\n  )\n}\n</code></pre>"},{"location":"migration/notes/#wiremock","title":"Wiremock","text":"<pre><code>wiremock {\n  WireMockSystemOptions(\n    port = 9090,\n    serde = StoveSerde.jackson.anyByteArraySerde(ObjectMapperConfiguration.default)\n  )\n</code></pre>"},{"location":"migration/notes/#elasticsearch","title":"Elasticsearch","text":"<pre><code>elasticsearch {\n  ElasticsearchSystemOptions(\n    jsonpMapper = JacksonJsonpMapper(StoveSerde.jackson.default), // or any JsonpMapper\n  )\n}\n</code></pre>"},{"location":"migration/notes/#mongodb","title":"Mongodb","text":"<pre><code>mongodb {\n  MongoDbSystemOptions(\n    serde = StoveSerde.jackson.default // or any other serde that you implement\n  )\n}\n</code></pre> <p>The default serde is: <pre><code>  val serde: StoveSerde&lt;Any, String&gt; = StoveSerde.jackson.anyJsonStringSerde(\n    StoveSerde.jackson.byConfiguring {\n      disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)\n      enable(MapperFeature.DEFAULT_VIEW_INCLUSION)\n      addModule(ObjectIdModule())\n      addModule(KotlinModule.Builder().build())\n    }\n  ),\n</code></pre></p>"}]}